/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type TradeInputParametersStruct = {
  strikeId: BigNumberish;
  positionId: BigNumberish;
  iterations: BigNumberish;
  optionType: BigNumberish;
  amount: BigNumberish;
  setCollateralTo: BigNumberish;
  minTotalCost: BigNumberish;
  maxTotalCost: BigNumberish;
};

export type TradeInputParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  strikeId: BigNumber;
  positionId: BigNumber;
  iterations: BigNumber;
  optionType: number;
  amount: BigNumber;
  setCollateralTo: BigNumber;
  minTotalCost: BigNumber;
  maxTotalCost: BigNumber;
};

export type ResultStruct = {
  positionId: BigNumberish;
  totalCost: BigNumberish;
  totalFee: BigNumberish;
};

export type ResultStructOutput = [BigNumber, BigNumber, BigNumber] & {
  positionId: BigNumber;
  totalCost: BigNumber;
  totalFee: BigNumber;
};

export type OptionMarketContractsStruct = {
  quoteAsset: string;
  baseAsset: string;
  optionToken: string;
};

export type OptionMarketContractsStructOutput = [string, string, string] & {
  quoteAsset: string;
  baseAsset: string;
  optionToken: string;
};

export interface BasicOptionMarketWrapperInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "closePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "forceClosePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "marketContracts(address)": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "openPosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "updateMarket(address,(address,address,address))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closePosition",
    values: [string, TradeInputParametersStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceClosePosition",
    values: [string, TradeInputParametersStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketContracts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPosition",
    values: [string, TradeInputParametersStruct, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMarket",
    values: [string, OptionMarketContractsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMarket",
    data: BytesLike
  ): Result;

  events: {
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
}

export type OwnerChangedEvent = TypedEvent<
  [string, string],
  { oldOwner: string; newOwner: string }
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export type OwnerNominatedEvent = TypedEvent<[string], { newOwner: string }>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface BasicOptionMarketWrapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BasicOptionMarketWrapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePosition(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "closePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forceClosePosition(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "forceClosePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        quoteAsset: string;
        baseAsset: string;
        optionToken: string;
      }
    >;

    "marketContracts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        quoteAsset: string;
        baseAsset: string;
        optionToken: string;
      }
    >;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<[string]>;

    openPosition(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "openPosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    updateMarket(
      optionMarket: string,
      _marketContracts: OptionMarketContractsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateMarket(address,(address,address,address))"(
      optionMarket: string,
      _marketContracts: OptionMarketContractsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePosition(
    optionMarket: string,
    params: TradeInputParametersStruct,
    extraCollateral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "closePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
    optionMarket: string,
    params: TradeInputParametersStruct,
    extraCollateral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forceClosePosition(
    optionMarket: string,
    params: TradeInputParametersStruct,
    extraCollateral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "forceClosePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
    optionMarket: string,
    params: TradeInputParametersStruct,
    extraCollateral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketContracts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      quoteAsset: string;
      baseAsset: string;
      optionToken: string;
    }
  >;

  "marketContracts(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      quoteAsset: string;
      baseAsset: string;
      optionToken: string;
    }
  >;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "nominateNewOwner(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

  openPosition(
    optionMarket: string,
    params: TradeInputParametersStruct,
    extraCollateral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "openPosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
    optionMarket: string,
    params: TradeInputParametersStruct,
    extraCollateral: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  updateMarket(
    optionMarket: string,
    _marketContracts: OptionMarketContractsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateMarket(address,(address,address,address))"(
    optionMarket: string,
    _marketContracts: OptionMarketContractsStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    closePosition(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ResultStructOutput>;

    "closePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ResultStructOutput>;

    forceClosePosition(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ResultStructOutput>;

    "forceClosePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ResultStructOutput>;

    marketContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        quoteAsset: string;
        baseAsset: string;
        optionToken: string;
      }
    >;

    "marketContracts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        quoteAsset: string;
        baseAsset: string;
        optionToken: string;
      }
    >;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

    openPosition(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ResultStructOutput>;

    "openPosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: CallOverrides
    ): Promise<ResultStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    updateMarket(
      optionMarket: string,
      _marketContracts: OptionMarketContractsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMarket(address,(address,address,address))"(
      optionMarket: string,
      _marketContracts: OptionMarketContractsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnerChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    "OwnerNominated(address)"(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePosition(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "closePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forceClosePosition(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "forceClosePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketContracts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    openPosition(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "openPosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateMarket(
      optionMarket: string,
      _marketContracts: OptionMarketContractsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateMarket(address,(address,address,address))"(
      optionMarket: string,
      _marketContracts: OptionMarketContractsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePosition(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "closePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forceClosePosition(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "forceClosePosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketContracts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nominatedOwner()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPosition(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "openPosition(address,(uint256,uint256,uint256,uint8,uint256,uint256,uint256,uint256),uint256)"(
      optionMarket: string,
      params: TradeInputParametersStruct,
      extraCollateral: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMarket(
      optionMarket: string,
      _marketContracts: OptionMarketContractsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateMarket(address,(address,address,address))"(
      optionMarket: string,
      _marketContracts: OptionMarketContractsStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
