/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OptionMarketAddressesStruct = {
  liquidityPool: string;
  liquidityToken: string;
  greekCache: string;
  optionMarket: string;
  optionMarketPricer: string;
  optionToken: string;
  poolHedger: string;
  shortCollateral: string;
  gwavOracle: string;
  quoteAsset: string;
  baseAsset: string;
};

export type OptionMarketAddressesStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  liquidityPool: string;
  liquidityToken: string;
  greekCache: string;
  optionMarket: string;
  optionMarketPricer: string;
  optionToken: string;
  poolHedger: string;
  shortCollateral: string;
  gwavOracle: string;
  quoteAsset: string;
  baseAsset: string;
};

export interface ILyraRegistryInterface extends utils.Interface {
  functions: {
    "getGlobalAddress(bytes32)": FunctionFragment;
    "getMarketAddresses(address)": FunctionFragment;
    "globalAddresses(bytes32)": FunctionFragment;
    "marketAddress(address)": FunctionFragment;
    "optionMarkets()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getGlobalAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "globalAddresses",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "marketAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "optionMarkets",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getGlobalAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionMarkets",
    data: BytesLike
  ): Result;

  events: {
    "GlobalAddressUpdated(bytes32,address)": EventFragment;
    "MarketRemoved(address)": EventFragment;
    "MarketUpdated(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GlobalAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketUpdated"): EventFragment;
}

export type GlobalAddressUpdatedEvent = TypedEvent<
  [string, string],
  { name: string; addr: string }
>;

export type GlobalAddressUpdatedEventFilter =
  TypedEventFilter<GlobalAddressUpdatedEvent>;

export type MarketRemovedEvent = TypedEvent<[string], { market: string }>;

export type MarketRemovedEventFilter = TypedEventFilter<MarketRemovedEvent>;

export type MarketUpdatedEvent = TypedEvent<
  [string, OptionMarketAddressesStructOutput],
  { optionMarket: string; market: OptionMarketAddressesStructOutput }
>;

export type MarketUpdatedEventFilter = TypedEventFilter<MarketUpdatedEvent>;

export interface ILyraRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILyraRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getGlobalAddress(
      contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { globalContract: string }>;

    "getGlobalAddress(bytes32)"(
      contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { globalContract: string }>;

    getMarketAddresses(
      optionMarket: string,
      overrides?: CallOverrides
    ): Promise<[OptionMarketAddressesStructOutput]>;

    "getMarketAddresses(address)"(
      optionMarket: string,
      overrides?: CallOverrides
    ): Promise<[OptionMarketAddressesStructOutput]>;

    globalAddresses(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "globalAddresses(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    marketAddress(
      market: string,
      overrides?: CallOverrides
    ): Promise<[OptionMarketAddressesStructOutput]>;

    "marketAddress(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<[OptionMarketAddressesStructOutput]>;

    optionMarkets(overrides?: CallOverrides): Promise<[string[]]>;

    "optionMarkets()"(overrides?: CallOverrides): Promise<[string[]]>;
  };

  getGlobalAddress(
    contractName: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getGlobalAddress(bytes32)"(
    contractName: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketAddresses(
    optionMarket: string,
    overrides?: CallOverrides
  ): Promise<OptionMarketAddressesStructOutput>;

  "getMarketAddresses(address)"(
    optionMarket: string,
    overrides?: CallOverrides
  ): Promise<OptionMarketAddressesStructOutput>;

  globalAddresses(name: BytesLike, overrides?: CallOverrides): Promise<string>;

  "globalAddresses(bytes32)"(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  marketAddress(
    market: string,
    overrides?: CallOverrides
  ): Promise<OptionMarketAddressesStructOutput>;

  "marketAddress(address)"(
    market: string,
    overrides?: CallOverrides
  ): Promise<OptionMarketAddressesStructOutput>;

  optionMarkets(overrides?: CallOverrides): Promise<string[]>;

  "optionMarkets()"(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    getGlobalAddress(
      contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getGlobalAddress(bytes32)"(
      contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketAddresses(
      optionMarket: string,
      overrides?: CallOverrides
    ): Promise<OptionMarketAddressesStructOutput>;

    "getMarketAddresses(address)"(
      optionMarket: string,
      overrides?: CallOverrides
    ): Promise<OptionMarketAddressesStructOutput>;

    globalAddresses(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "globalAddresses(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    marketAddress(
      market: string,
      overrides?: CallOverrides
    ): Promise<OptionMarketAddressesStructOutput>;

    "marketAddress(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<OptionMarketAddressesStructOutput>;

    optionMarkets(overrides?: CallOverrides): Promise<string[]>;

    "optionMarkets()"(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "GlobalAddressUpdated(bytes32,address)"(
      name?: BytesLike | null,
      addr?: null
    ): GlobalAddressUpdatedEventFilter;
    GlobalAddressUpdated(
      name?: BytesLike | null,
      addr?: null
    ): GlobalAddressUpdatedEventFilter;

    "MarketRemoved(address)"(market?: string | null): MarketRemovedEventFilter;
    MarketRemoved(market?: string | null): MarketRemovedEventFilter;

    "MarketUpdated(address,tuple)"(
      optionMarket?: string | null,
      market?: null
    ): MarketUpdatedEventFilter;
    MarketUpdated(
      optionMarket?: string | null,
      market?: null
    ): MarketUpdatedEventFilter;
  };

  estimateGas: {
    getGlobalAddress(
      contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGlobalAddress(bytes32)"(
      contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketAddresses(
      optionMarket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketAddresses(address)"(
      optionMarket: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalAddresses(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "globalAddresses(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketAddress(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketAddress(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionMarkets(overrides?: CallOverrides): Promise<BigNumber>;

    "optionMarkets()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getGlobalAddress(
      contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGlobalAddress(bytes32)"(
      contractName: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketAddresses(
      optionMarket: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketAddresses(address)"(
      optionMarket: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalAddresses(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "globalAddresses(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketAddress(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketAddress(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionMarkets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "optionMarkets()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
