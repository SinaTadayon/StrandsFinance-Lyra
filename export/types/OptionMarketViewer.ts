/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OptionMarketAddressesStruct = {
  liquidityPool: string;
  liquidityToken: string;
  greekCache: string;
  optionMarket: string;
  optionMarketPricer: string;
  optionToken: string;
  shortCollateral: string;
  poolHedger: string;
  quoteAsset: string;
  baseAsset: string;
};

export type OptionMarketAddressesStructOutput = [
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string,
  string
] & {
  liquidityPool: string;
  liquidityToken: string;
  greekCache: string;
  optionMarket: string;
  optionMarketPricer: string;
  optionToken: string;
  shortCollateral: string;
  poolHedger: string;
  quoteAsset: string;
  baseAsset: string;
};

export type NetGreeksStruct = {
  netDelta: BigNumberish;
  netStdVega: BigNumberish;
  netOptionValue: BigNumberish;
};

export type NetGreeksStructOutput = [BigNumber, BigNumber, BigNumber] & {
  netDelta: BigNumber;
  netStdVega: BigNumber;
  netOptionValue: BigNumber;
};

export type StrikeGreeksStruct = {
  callDelta: BigNumberish;
  putDelta: BigNumberish;
  stdVega: BigNumberish;
  callPrice: BigNumberish;
  putPrice: BigNumberish;
};

export type StrikeGreeksStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  callDelta: BigNumber;
  putDelta: BigNumber;
  stdVega: BigNumber;
  callPrice: BigNumber;
  putPrice: BigNumber;
};

export type StrikeViewStruct = {
  strikeId: BigNumberish;
  boardId: BigNumberish;
  strikePrice: BigNumberish;
  skew: BigNumberish;
  forceCloseSkew: BigNumberish;
  cachedGreeks: StrikeGreeksStruct;
  baseReturnedRatio: BigNumberish;
  longCallOpenInterest: BigNumberish;
  longPutOpenInterest: BigNumberish;
  shortCallBaseOpenInterest: BigNumberish;
  shortCallQuoteOpenInterest: BigNumberish;
  shortPutOpenInterest: BigNumberish;
};

export type StrikeViewStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  StrikeGreeksStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  strikeId: BigNumber;
  boardId: BigNumber;
  strikePrice: BigNumber;
  skew: BigNumber;
  forceCloseSkew: BigNumber;
  cachedGreeks: StrikeGreeksStructOutput;
  baseReturnedRatio: BigNumber;
  longCallOpenInterest: BigNumber;
  longPutOpenInterest: BigNumber;
  shortCallBaseOpenInterest: BigNumber;
  shortCallQuoteOpenInterest: BigNumber;
  shortPutOpenInterest: BigNumber;
};

export type BoardViewStruct = {
  market: string;
  boardId: BigNumberish;
  expiry: BigNumberish;
  baseIv: BigNumberish;
  priceAtExpiry: BigNumberish;
  isPaused: boolean;
  forceCloseGwavIV: BigNumberish;
  netGreeks: NetGreeksStruct;
  strikes: StrikeViewStruct[];
};

export type BoardViewStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  NetGreeksStructOutput,
  StrikeViewStructOutput[]
] & {
  market: string;
  boardId: BigNumber;
  expiry: BigNumber;
  baseIv: BigNumber;
  priceAtExpiry: BigNumber;
  isPaused: boolean;
  forceCloseGwavIV: BigNumber;
  netGreeks: NetGreeksStructOutput;
  strikes: StrikeViewStructOutput[];
};

export type LiquidityBalanceAndAllowanceStruct = {
  token: string;
  balance: BigNumberish;
  allowance: BigNumberish;
};

export type LiquidityBalanceAndAllowanceStructOutput = [
  string,
  BigNumber,
  BigNumber
] & { token: string; balance: BigNumber; allowance: BigNumber };

export type OptionMarketParametersStruct = {
  maxBoardExpiry: BigNumberish;
  securityModule: string;
  feePortionReserved: BigNumberish;
  staticBaseSettlementFee: BigNumberish;
};

export type OptionMarketParametersStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber
] & {
  maxBoardExpiry: BigNumber;
  securityModule: string;
  feePortionReserved: BigNumber;
  staticBaseSettlementFee: BigNumber;
};

export type LiquidityPoolParametersStruct = {
  minDepositWithdraw: BigNumberish;
  depositDelay: BigNumberish;
  withdrawalDelay: BigNumberish;
  withdrawalFee: BigNumberish;
  liquidityCBThreshold: BigNumberish;
  liquidityCBTimeout: BigNumberish;
  ivVarianceCBThreshold: BigNumberish;
  skewVarianceCBThreshold: BigNumberish;
  ivVarianceCBTimeout: BigNumberish;
  skewVarianceCBTimeout: BigNumberish;
  guardianMultisig: string;
  guardianDelay: BigNumberish;
  boardSettlementCBTimeout: BigNumberish;
  maxFeePaid: BigNumberish;
};

export type LiquidityPoolParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  minDepositWithdraw: BigNumber;
  depositDelay: BigNumber;
  withdrawalDelay: BigNumber;
  withdrawalFee: BigNumber;
  liquidityCBThreshold: BigNumber;
  liquidityCBTimeout: BigNumber;
  ivVarianceCBThreshold: BigNumber;
  skewVarianceCBThreshold: BigNumber;
  ivVarianceCBTimeout: BigNumber;
  skewVarianceCBTimeout: BigNumber;
  guardianMultisig: string;
  guardianDelay: BigNumber;
  boardSettlementCBTimeout: BigNumber;
  maxFeePaid: BigNumber;
};

export type GreekCacheParametersStruct = {
  maxStrikesPerBoard: BigNumberish;
  acceptableSpotPricePercentMove: BigNumberish;
  staleUpdateDuration: BigNumberish;
  varianceIvGWAVPeriod: BigNumberish;
  varianceSkewGWAVPeriod: BigNumberish;
  optionValueIvGWAVPeriod: BigNumberish;
  optionValueSkewGWAVPeriod: BigNumberish;
  gwavSkewFloor: BigNumberish;
  gwavSkewCap: BigNumberish;
  rateAndCarry: BigNumberish;
};

export type GreekCacheParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  maxStrikesPerBoard: BigNumber;
  acceptableSpotPricePercentMove: BigNumber;
  staleUpdateDuration: BigNumber;
  varianceIvGWAVPeriod: BigNumber;
  varianceSkewGWAVPeriod: BigNumber;
  optionValueIvGWAVPeriod: BigNumber;
  optionValueSkewGWAVPeriod: BigNumber;
  gwavSkewFloor: BigNumber;
  gwavSkewCap: BigNumber;
  rateAndCarry: BigNumber;
};

export type ForceCloseParametersStruct = {
  ivGWAVPeriod: BigNumberish;
  skewGWAVPeriod: BigNumberish;
  shortVolShock: BigNumberish;
  shortPostCutoffVolShock: BigNumberish;
  longVolShock: BigNumberish;
  longPostCutoffVolShock: BigNumberish;
  liquidateVolShock: BigNumberish;
  liquidatePostCutoffVolShock: BigNumberish;
  shortSpotMin: BigNumberish;
  liquidateSpotMin: BigNumberish;
};

export type ForceCloseParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  ivGWAVPeriod: BigNumber;
  skewGWAVPeriod: BigNumber;
  shortVolShock: BigNumber;
  shortPostCutoffVolShock: BigNumber;
  longVolShock: BigNumber;
  longPostCutoffVolShock: BigNumber;
  liquidateVolShock: BigNumber;
  liquidatePostCutoffVolShock: BigNumber;
  shortSpotMin: BigNumber;
  liquidateSpotMin: BigNumber;
};

export type MinCollateralParametersStruct = {
  minStaticQuoteCollateral: BigNumberish;
  minStaticBaseCollateral: BigNumberish;
  shockVolA: BigNumberish;
  shockVolPointA: BigNumberish;
  shockVolB: BigNumberish;
  shockVolPointB: BigNumberish;
  callSpotPriceShock: BigNumberish;
  putSpotPriceShock: BigNumberish;
};

export type MinCollateralParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  minStaticQuoteCollateral: BigNumber;
  minStaticBaseCollateral: BigNumber;
  shockVolA: BigNumber;
  shockVolPointA: BigNumber;
  shockVolB: BigNumber;
  shockVolPointB: BigNumber;
  callSpotPriceShock: BigNumber;
  putSpotPriceShock: BigNumber;
};

export type PricingParametersStruct = {
  optionPriceFeeCoefficient: BigNumberish;
  optionPriceFee1xPoint: BigNumberish;
  optionPriceFee2xPoint: BigNumberish;
  spotPriceFeeCoefficient: BigNumberish;
  spotPriceFee1xPoint: BigNumberish;
  spotPriceFee2xPoint: BigNumberish;
  vegaFeeCoefficient: BigNumberish;
  standardSize: BigNumberish;
  skewAdjustmentFactor: BigNumberish;
};

export type PricingParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  optionPriceFeeCoefficient: BigNumber;
  optionPriceFee1xPoint: BigNumber;
  optionPriceFee2xPoint: BigNumber;
  spotPriceFeeCoefficient: BigNumber;
  spotPriceFee1xPoint: BigNumber;
  spotPriceFee2xPoint: BigNumber;
  vegaFeeCoefficient: BigNumber;
  standardSize: BigNumber;
  skewAdjustmentFactor: BigNumber;
};

export type TradeLimitParametersStruct = {
  minDelta: BigNumberish;
  minForceCloseDelta: BigNumberish;
  tradingCutoff: BigNumberish;
  minBaseIV: BigNumberish;
  maxBaseIV: BigNumberish;
  minSkew: BigNumberish;
  maxSkew: BigNumberish;
  minVol: BigNumberish;
  maxVol: BigNumberish;
  absMinSkew: BigNumberish;
  absMaxSkew: BigNumberish;
  capSkewsToAbs: boolean;
};

export type TradeLimitParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  minDelta: BigNumber;
  minForceCloseDelta: BigNumber;
  tradingCutoff: BigNumber;
  minBaseIV: BigNumber;
  maxBaseIV: BigNumber;
  minSkew: BigNumber;
  maxSkew: BigNumber;
  minVol: BigNumber;
  maxVol: BigNumber;
  absMinSkew: BigNumber;
  absMaxSkew: BigNumber;
  capSkewsToAbs: boolean;
};

export type VarianceFeeParametersStruct = {
  defaultVarianceFeeCoefficient: BigNumberish;
  forceCloseVarianceFeeCoefficient: BigNumberish;
  skewAdjustmentCoefficient: BigNumberish;
  referenceSkew: BigNumberish;
  minimumStaticSkewAdjustment: BigNumberish;
  vegaCoefficient: BigNumberish;
  minimumStaticVega: BigNumberish;
  ivVarianceCoefficient: BigNumberish;
  minimumStaticIvVariance: BigNumberish;
};

export type VarianceFeeParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  defaultVarianceFeeCoefficient: BigNumber;
  forceCloseVarianceFeeCoefficient: BigNumber;
  skewAdjustmentCoefficient: BigNumber;
  referenceSkew: BigNumber;
  minimumStaticSkewAdjustment: BigNumber;
  vegaCoefficient: BigNumber;
  minimumStaticVega: BigNumber;
  ivVarianceCoefficient: BigNumber;
  minimumStaticIvVariance: BigNumber;
};

export type PartialCollateralParametersStruct = {
  penaltyRatio: BigNumberish;
  liquidatorFeeRatio: BigNumberish;
  smFeeRatio: BigNumberish;
  minLiquidationFee: BigNumberish;
};

export type PartialCollateralParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  penaltyRatio: BigNumber;
  liquidatorFeeRatio: BigNumber;
  smFeeRatio: BigNumber;
  minLiquidationFee: BigNumber;
};

export type PoolHedgerParametersStruct = {
  interactionDelay: BigNumberish;
  hedgeCap: BigNumberish;
};

export type PoolHedgerParametersStructOutput = [BigNumber, BigNumber] & {
  interactionDelay: BigNumber;
  hedgeCap: BigNumber;
};

export type MarketParametersStruct = {
  optionMarketParams: OptionMarketParametersStruct;
  lpParams: LiquidityPoolParametersStruct;
  greekCacheParams: GreekCacheParametersStruct;
  forceCloseParams: ForceCloseParametersStruct;
  minCollatParams: MinCollateralParametersStruct;
  pricingParams: PricingParametersStruct;
  tradeLimitParams: TradeLimitParametersStruct;
  varianceFeeParams: VarianceFeeParametersStruct;
  partialCollatParams: PartialCollateralParametersStruct;
  poolHedgerParams: PoolHedgerParametersStruct;
};

export type MarketParametersStructOutput = [
  OptionMarketParametersStructOutput,
  LiquidityPoolParametersStructOutput,
  GreekCacheParametersStructOutput,
  ForceCloseParametersStructOutput,
  MinCollateralParametersStructOutput,
  PricingParametersStructOutput,
  TradeLimitParametersStructOutput,
  VarianceFeeParametersStructOutput,
  PartialCollateralParametersStructOutput,
  PoolHedgerParametersStructOutput
] & {
  optionMarketParams: OptionMarketParametersStructOutput;
  lpParams: LiquidityPoolParametersStructOutput;
  greekCacheParams: GreekCacheParametersStructOutput;
  forceCloseParams: ForceCloseParametersStructOutput;
  minCollatParams: MinCollateralParametersStructOutput;
  pricingParams: PricingParametersStructOutput;
  tradeLimitParams: TradeLimitParametersStructOutput;
  varianceFeeParams: VarianceFeeParametersStructOutput;
  partialCollatParams: PartialCollateralParametersStructOutput;
  poolHedgerParams: PoolHedgerParametersStructOutput;
};

export type LiquidityStruct = {
  freeLiquidity: BigNumberish;
  burnableLiquidity: BigNumberish;
  usedCollatLiquidity: BigNumberish;
  pendingDeltaLiquidity: BigNumberish;
  usedDeltaLiquidity: BigNumberish;
  NAV: BigNumberish;
};

export type LiquidityStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  freeLiquidity: BigNumber;
  burnableLiquidity: BigNumber;
  usedCollatLiquidity: BigNumber;
  pendingDeltaLiquidity: BigNumber;
  usedDeltaLiquidity: BigNumber;
  NAV: BigNumber;
};

export type ExchangeParamsStruct = {
  spotPrice: BigNumberish;
  quoteKey: BytesLike;
  baseKey: BytesLike;
  quoteBaseFeeRate: BigNumberish;
  baseQuoteFeeRate: BigNumberish;
};

export type ExchangeParamsStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  spotPrice: BigNumber;
  quoteKey: string;
  baseKey: string;
  quoteBaseFeeRate: BigNumber;
  baseQuoteFeeRate: BigNumber;
};

export type MarketViewWithBoardsStruct = {
  isPaused: boolean;
  totalQueuedDeposits: BigNumberish;
  totalQueuedWithdrawals: BigNumberish;
  tokenPrice: BigNumberish;
  marketAddresses: OptionMarketAddressesStruct;
  marketParameters: MarketParametersStruct;
  liquidity: LiquidityStruct;
  globalNetGreeks: NetGreeksStruct;
  liveBoards: BoardViewStruct[];
  exchangeParams: ExchangeParamsStruct;
};

export type MarketViewWithBoardsStructOutput = [
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  OptionMarketAddressesStructOutput,
  MarketParametersStructOutput,
  LiquidityStructOutput,
  NetGreeksStructOutput,
  BoardViewStructOutput[],
  ExchangeParamsStructOutput
] & {
  isPaused: boolean;
  totalQueuedDeposits: BigNumber;
  totalQueuedWithdrawals: BigNumber;
  tokenPrice: BigNumber;
  marketAddresses: OptionMarketAddressesStructOutput;
  marketParameters: MarketParametersStructOutput;
  liquidity: LiquidityStructOutput;
  globalNetGreeks: NetGreeksStructOutput;
  liveBoards: BoardViewStructOutput[];
  exchangeParams: ExchangeParamsStructOutput;
};

export type MarketViewStruct = {
  isPaused: boolean;
  totalQueuedDeposits: BigNumberish;
  totalQueuedWithdrawals: BigNumberish;
  tokenPrice: BigNumberish;
  marketAddresses: OptionMarketAddressesStruct;
  marketParameters: MarketParametersStruct;
  liquidity: LiquidityStruct;
  globalNetGreeks: NetGreeksStruct;
  exchangeParams: ExchangeParamsStruct;
};

export type MarketViewStructOutput = [
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  OptionMarketAddressesStructOutput,
  MarketParametersStructOutput,
  LiquidityStructOutput,
  NetGreeksStructOutput,
  ExchangeParamsStructOutput
] & {
  isPaused: boolean;
  totalQueuedDeposits: BigNumber;
  totalQueuedWithdrawals: BigNumber;
  tokenPrice: BigNumber;
  marketAddresses: OptionMarketAddressesStructOutput;
  marketParameters: MarketParametersStructOutput;
  liquidity: LiquidityStructOutput;
  globalNetGreeks: NetGreeksStructOutput;
  exchangeParams: ExchangeParamsStructOutput;
};

export type MarketsViewStruct = {
  addressResolver: string;
  isPaused: boolean;
  markets: MarketViewStruct[];
};

export type MarketsViewStructOutput = [
  string,
  boolean,
  MarketViewStructOutput[]
] & {
  addressResolver: string;
  isPaused: boolean;
  markets: MarketViewStructOutput[];
};

export type OptionPositionStruct = {
  positionId: BigNumberish;
  strikeId: BigNumberish;
  optionType: BigNumberish;
  amount: BigNumberish;
  collateral: BigNumberish;
  state: BigNumberish;
};

export type OptionPositionStructOutput = [
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  number
] & {
  positionId: BigNumber;
  strikeId: BigNumber;
  optionType: number;
  amount: BigNumber;
  collateral: BigNumber;
  state: number;
};

export type MarketOptionPositionsStruct = {
  market: string;
  positions: OptionPositionStruct[];
};

export type MarketOptionPositionsStructOutput = [
  string,
  OptionPositionStructOutput[]
] & { market: string; positions: OptionPositionStructOutput[] };

export interface OptionMarketViewerInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "addMarket((address,address,address,address,address,address,address,address,address,address))": FunctionFragment;
    "getBoard(address,uint256)": FunctionFragment;
    "getBoardForBaseKey(bytes32,uint256)": FunctionFragment;
    "getBoardForStrikeId(address,uint256)": FunctionFragment;
    "getLiquidityBalancesAndAllowances(address[],address)": FunctionFragment;
    "getLiveBoards(address)": FunctionFragment;
    "getMarket(address)": FunctionFragment;
    "getMarketAddresses()": FunctionFragment;
    "getMarketForBaseKey(bytes32)": FunctionFragment;
    "getMarkets(address[])": FunctionFragment;
    "getOwnerPositions(address)": FunctionFragment;
    "getOwnerPositionsInRange(address,address,uint256,uint256)": FunctionFragment;
    "init(address)": FunctionFragment;
    "initialized()": FunctionFragment;
    "marketAddresses(address)": FunctionFragment;
    "nominateNewOwner(address)": FunctionFragment;
    "nominatedOwner()": FunctionFragment;
    "optionMarkets(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeMarket(address)": FunctionFragment;
    "synthetixAdapter()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMarket",
    values: [OptionMarketAddressesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoard",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoardForBaseKey",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoardForStrikeId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityBalancesAndAllowances",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiveBoards",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getMarket", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getMarketAddresses",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketForBaseKey",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerPositions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerPositionsInRange",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominateNewOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "nominatedOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionMarkets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeMarket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "synthetixAdapter",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBoard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBoardForBaseKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoardForStrikeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityBalancesAndAllowances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiveBoards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketForBaseKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerPositionsInRange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominatedOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionMarkets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "synthetixAdapter",
    data: BytesLike
  ): Result;

  events: {
    "MarketAdded(tuple)": EventFragment;
    "MarketRemoved(address)": EventFragment;
    "OwnerChanged(address,address)": EventFragment;
    "OwnerNominated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MarketAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerNominated"): EventFragment;
}

export type MarketAddedEvent = TypedEvent<
  [OptionMarketAddressesStructOutput],
  { market: OptionMarketAddressesStructOutput }
>;

export type MarketAddedEventFilter = TypedEventFilter<MarketAddedEvent>;

export type MarketRemovedEvent = TypedEvent<[string], { market: string }>;

export type MarketRemovedEventFilter = TypedEventFilter<MarketRemovedEvent>;

export type OwnerChangedEvent = TypedEvent<
  [string, string],
  { oldOwner: string; newOwner: string }
>;

export type OwnerChangedEventFilter = TypedEventFilter<OwnerChangedEvent>;

export type OwnerNominatedEvent = TypedEvent<[string], { newOwner: string }>;

export type OwnerNominatedEventFilter = TypedEventFilter<OwnerNominatedEvent>;

export interface OptionMarketViewer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptionMarketViewerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMarket(
      newMarketAddresses: OptionMarketAddressesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addMarket((address,address,address,address,address,address,address,address,address,address))"(
      newMarketAddresses: OptionMarketAddressesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBoard(
      market: string,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BoardViewStructOutput]>;

    "getBoard(address,uint256)"(
      market: string,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BoardViewStructOutput]>;

    getBoardForBaseKey(
      baseKey: BytesLike,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BoardViewStructOutput]>;

    "getBoardForBaseKey(bytes32,uint256)"(
      baseKey: BytesLike,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BoardViewStructOutput]>;

    getBoardForStrikeId(
      market: string,
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BoardViewStructOutput]>;

    "getBoardForStrikeId(address,uint256)"(
      market: string,
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BoardViewStructOutput]>;

    getLiquidityBalancesAndAllowances(
      markets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<[LiquidityBalanceAndAllowanceStructOutput[]]>;

    "getLiquidityBalancesAndAllowances(address[],address)"(
      markets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<[LiquidityBalanceAndAllowanceStructOutput[]]>;

    getLiveBoards(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [BoardViewStructOutput[]] & { marketBoards: BoardViewStructOutput[] }
    >;

    "getLiveBoards(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<
      [BoardViewStructOutput[]] & { marketBoards: BoardViewStructOutput[] }
    >;

    getMarket(
      market: string,
      overrides?: CallOverrides
    ): Promise<[MarketViewWithBoardsStructOutput]>;

    "getMarket(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<[MarketViewWithBoardsStructOutput]>;

    getMarketAddresses(
      overrides?: CallOverrides
    ): Promise<[OptionMarketAddressesStructOutput[]]>;

    "getMarketAddresses()"(
      overrides?: CallOverrides
    ): Promise<[OptionMarketAddressesStructOutput[]]>;

    getMarketForBaseKey(
      baseKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [MarketViewWithBoardsStructOutput] & {
        market: MarketViewWithBoardsStructOutput;
      }
    >;

    "getMarketForBaseKey(bytes32)"(
      baseKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [MarketViewWithBoardsStructOutput] & {
        market: MarketViewWithBoardsStructOutput;
      }
    >;

    getMarkets(
      markets: string[],
      overrides?: CallOverrides
    ): Promise<
      [MarketsViewStructOutput] & { marketsView: MarketsViewStructOutput }
    >;

    "getMarkets(address[])"(
      markets: string[],
      overrides?: CallOverrides
    ): Promise<
      [MarketsViewStructOutput] & { marketsView: MarketsViewStructOutput }
    >;

    getOwnerPositions(
      account: string,
      overrides?: CallOverrides
    ): Promise<[MarketOptionPositionsStructOutput[]]>;

    "getOwnerPositions(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[MarketOptionPositionsStructOutput[]]>;

    getOwnerPositionsInRange(
      market: string,
      account: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OptionPositionStructOutput[]]>;

    "getOwnerPositionsInRange(address,address,uint256,uint256)"(
      market: string,
      account: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OptionPositionStructOutput[]]>;

    init(
      _synthetixAdapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "init(address)"(
      _synthetixAdapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    "initialized()"(overrides?: CallOverrides): Promise<[boolean]>;

    marketAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        liquidityPool: string;
        liquidityToken: string;
        greekCache: string;
        optionMarket: string;
        optionMarketPricer: string;
        optionToken: string;
        shortCollateral: string;
        poolHedger: string;
        quoteAsset: string;
        baseAsset: string;
      }
    >;

    "marketAddresses(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        liquidityPool: string;
        liquidityToken: string;
        greekCache: string;
        optionMarket: string;
        optionMarketPricer: string;
        optionToken: string;
        shortCollateral: string;
        poolHedger: string;
        quoteAsset: string;
        baseAsset: string;
      }
    >;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<[string]>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<[string]>;

    optionMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "optionMarkets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeMarket(
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeMarket(address)"(
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    synthetixAdapter(overrides?: CallOverrides): Promise<[string]>;

    "synthetixAdapter()"(overrides?: CallOverrides): Promise<[string]>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "acceptOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMarket(
    newMarketAddresses: OptionMarketAddressesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addMarket((address,address,address,address,address,address,address,address,address,address))"(
    newMarketAddresses: OptionMarketAddressesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBoard(
    market: string,
    boardId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BoardViewStructOutput>;

  "getBoard(address,uint256)"(
    market: string,
    boardId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BoardViewStructOutput>;

  getBoardForBaseKey(
    baseKey: BytesLike,
    boardId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BoardViewStructOutput>;

  "getBoardForBaseKey(bytes32,uint256)"(
    baseKey: BytesLike,
    boardId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BoardViewStructOutput>;

  getBoardForStrikeId(
    market: string,
    strikeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BoardViewStructOutput>;

  "getBoardForStrikeId(address,uint256)"(
    market: string,
    strikeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BoardViewStructOutput>;

  getLiquidityBalancesAndAllowances(
    markets: string[],
    account: string,
    overrides?: CallOverrides
  ): Promise<LiquidityBalanceAndAllowanceStructOutput[]>;

  "getLiquidityBalancesAndAllowances(address[],address)"(
    markets: string[],
    account: string,
    overrides?: CallOverrides
  ): Promise<LiquidityBalanceAndAllowanceStructOutput[]>;

  getLiveBoards(
    market: string,
    overrides?: CallOverrides
  ): Promise<BoardViewStructOutput[]>;

  "getLiveBoards(address)"(
    market: string,
    overrides?: CallOverrides
  ): Promise<BoardViewStructOutput[]>;

  getMarket(
    market: string,
    overrides?: CallOverrides
  ): Promise<MarketViewWithBoardsStructOutput>;

  "getMarket(address)"(
    market: string,
    overrides?: CallOverrides
  ): Promise<MarketViewWithBoardsStructOutput>;

  getMarketAddresses(
    overrides?: CallOverrides
  ): Promise<OptionMarketAddressesStructOutput[]>;

  "getMarketAddresses()"(
    overrides?: CallOverrides
  ): Promise<OptionMarketAddressesStructOutput[]>;

  getMarketForBaseKey(
    baseKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<MarketViewWithBoardsStructOutput>;

  "getMarketForBaseKey(bytes32)"(
    baseKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<MarketViewWithBoardsStructOutput>;

  getMarkets(
    markets: string[],
    overrides?: CallOverrides
  ): Promise<MarketsViewStructOutput>;

  "getMarkets(address[])"(
    markets: string[],
    overrides?: CallOverrides
  ): Promise<MarketsViewStructOutput>;

  getOwnerPositions(
    account: string,
    overrides?: CallOverrides
  ): Promise<MarketOptionPositionsStructOutput[]>;

  "getOwnerPositions(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<MarketOptionPositionsStructOutput[]>;

  getOwnerPositionsInRange(
    market: string,
    account: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OptionPositionStructOutput[]>;

  "getOwnerPositionsInRange(address,address,uint256,uint256)"(
    market: string,
    account: string,
    start: BigNumberish,
    limit: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OptionPositionStructOutput[]>;

  init(
    _synthetixAdapter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "init(address)"(
    _synthetixAdapter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  "initialized()"(overrides?: CallOverrides): Promise<boolean>;

  marketAddresses(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ] & {
      liquidityPool: string;
      liquidityToken: string;
      greekCache: string;
      optionMarket: string;
      optionMarketPricer: string;
      optionToken: string;
      shortCollateral: string;
      poolHedger: string;
      quoteAsset: string;
      baseAsset: string;
    }
  >;

  "marketAddresses(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ] & {
      liquidityPool: string;
      liquidityToken: string;
      greekCache: string;
      optionMarket: string;
      optionMarketPricer: string;
      optionToken: string;
      shortCollateral: string;
      poolHedger: string;
      quoteAsset: string;
      baseAsset: string;
    }
  >;

  nominateNewOwner(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "nominateNewOwner(address)"(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nominatedOwner(overrides?: CallOverrides): Promise<string>;

  "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

  optionMarkets(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "optionMarkets(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeMarket(
    market: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeMarket(address)"(
    market: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  synthetixAdapter(overrides?: CallOverrides): Promise<string>;

  "synthetixAdapter()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    addMarket(
      newMarketAddresses: OptionMarketAddressesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "addMarket((address,address,address,address,address,address,address,address,address,address))"(
      newMarketAddresses: OptionMarketAddressesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    getBoard(
      market: string,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BoardViewStructOutput>;

    "getBoard(address,uint256)"(
      market: string,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BoardViewStructOutput>;

    getBoardForBaseKey(
      baseKey: BytesLike,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BoardViewStructOutput>;

    "getBoardForBaseKey(bytes32,uint256)"(
      baseKey: BytesLike,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BoardViewStructOutput>;

    getBoardForStrikeId(
      market: string,
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BoardViewStructOutput>;

    "getBoardForStrikeId(address,uint256)"(
      market: string,
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BoardViewStructOutput>;

    getLiquidityBalancesAndAllowances(
      markets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<LiquidityBalanceAndAllowanceStructOutput[]>;

    "getLiquidityBalancesAndAllowances(address[],address)"(
      markets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<LiquidityBalanceAndAllowanceStructOutput[]>;

    getLiveBoards(
      market: string,
      overrides?: CallOverrides
    ): Promise<BoardViewStructOutput[]>;

    "getLiveBoards(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<BoardViewStructOutput[]>;

    getMarket(
      market: string,
      overrides?: CallOverrides
    ): Promise<MarketViewWithBoardsStructOutput>;

    "getMarket(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<MarketViewWithBoardsStructOutput>;

    getMarketAddresses(
      overrides?: CallOverrides
    ): Promise<OptionMarketAddressesStructOutput[]>;

    "getMarketAddresses()"(
      overrides?: CallOverrides
    ): Promise<OptionMarketAddressesStructOutput[]>;

    getMarketForBaseKey(
      baseKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<MarketViewWithBoardsStructOutput>;

    "getMarketForBaseKey(bytes32)"(
      baseKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<MarketViewWithBoardsStructOutput>;

    getMarkets(
      markets: string[],
      overrides?: CallOverrides
    ): Promise<MarketsViewStructOutput>;

    "getMarkets(address[])"(
      markets: string[],
      overrides?: CallOverrides
    ): Promise<MarketsViewStructOutput>;

    getOwnerPositions(
      account: string,
      overrides?: CallOverrides
    ): Promise<MarketOptionPositionsStructOutput[]>;

    "getOwnerPositions(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<MarketOptionPositionsStructOutput[]>;

    getOwnerPositionsInRange(
      market: string,
      account: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OptionPositionStructOutput[]>;

    "getOwnerPositionsInRange(address,address,uint256,uint256)"(
      market: string,
      account: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OptionPositionStructOutput[]>;

    init(_synthetixAdapter: string, overrides?: CallOverrides): Promise<void>;

    "init(address)"(
      _synthetixAdapter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    "initialized()"(overrides?: CallOverrides): Promise<boolean>;

    marketAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        liquidityPool: string;
        liquidityToken: string;
        greekCache: string;
        optionMarket: string;
        optionMarketPricer: string;
        optionToken: string;
        shortCollateral: string;
        poolHedger: string;
        quoteAsset: string;
        baseAsset: string;
      }
    >;

    "marketAddresses(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ] & {
        liquidityPool: string;
        liquidityToken: string;
        greekCache: string;
        optionMarket: string;
        optionMarketPricer: string;
        optionToken: string;
        shortCollateral: string;
        poolHedger: string;
        quoteAsset: string;
        baseAsset: string;
      }
    >;

    nominateNewOwner(_owner: string, overrides?: CallOverrides): Promise<void>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    nominatedOwner(overrides?: CallOverrides): Promise<string>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<string>;

    optionMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "optionMarkets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeMarket(market: string, overrides?: CallOverrides): Promise<void>;

    "removeMarket(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    synthetixAdapter(overrides?: CallOverrides): Promise<string>;

    "synthetixAdapter()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "MarketAdded(tuple)"(market?: null): MarketAddedEventFilter;
    MarketAdded(market?: null): MarketAddedEventFilter;

    "MarketRemoved(address)"(market?: null): MarketRemovedEventFilter;
    MarketRemoved(market?: null): MarketRemovedEventFilter;

    "OwnerChanged(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): OwnerChangedEventFilter;
    OwnerChanged(oldOwner?: null, newOwner?: null): OwnerChangedEventFilter;

    "OwnerNominated(address)"(newOwner?: null): OwnerNominatedEventFilter;
    OwnerNominated(newOwner?: null): OwnerNominatedEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMarket(
      newMarketAddresses: OptionMarketAddressesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addMarket((address,address,address,address,address,address,address,address,address,address))"(
      newMarketAddresses: OptionMarketAddressesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBoard(
      market: string,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoard(address,uint256)"(
      market: string,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoardForBaseKey(
      baseKey: BytesLike,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoardForBaseKey(bytes32,uint256)"(
      baseKey: BytesLike,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBoardForStrikeId(
      market: string,
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoardForStrikeId(address,uint256)"(
      market: string,
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiquidityBalancesAndAllowances(
      markets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidityBalancesAndAllowances(address[],address)"(
      markets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLiveBoards(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiveBoards(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarket(market: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getMarket(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    "getMarketAddresses()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketForBaseKey(
      baseKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketForBaseKey(bytes32)"(
      baseKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarkets(
      markets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarkets(address[])"(
      markets: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerPositions(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOwnerPositions(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerPositionsInRange(
      market: string,
      account: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOwnerPositionsInRange(address,address,uint256,uint256)"(
      market: string,
      account: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _synthetixAdapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "init(address)"(
      _synthetixAdapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    "initialized()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketAddresses(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nominatedOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "nominatedOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "optionMarkets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeMarket(
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeMarket(address)"(
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    synthetixAdapter(overrides?: CallOverrides): Promise<BigNumber>;

    "synthetixAdapter()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "acceptOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMarket(
      newMarketAddresses: OptionMarketAddressesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addMarket((address,address,address,address,address,address,address,address,address,address))"(
      newMarketAddresses: OptionMarketAddressesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBoard(
      market: string,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBoard(address,uint256)"(
      market: string,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoardForBaseKey(
      baseKey: BytesLike,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBoardForBaseKey(bytes32,uint256)"(
      baseKey: BytesLike,
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBoardForStrikeId(
      market: string,
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBoardForStrikeId(address,uint256)"(
      market: string,
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidityBalancesAndAllowances(
      markets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidityBalancesAndAllowances(address[],address)"(
      markets: string[],
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiveBoards(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiveBoards(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarket(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarket(address)"(
      market: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketAddresses()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketForBaseKey(
      baseKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketForBaseKey(bytes32)"(
      baseKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarkets(
      markets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarkets(address[])"(
      markets: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerPositions(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwnerPositions(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerPositionsInRange(
      market: string,
      account: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOwnerPositionsInRange(address,address,uint256,uint256)"(
      market: string,
      account: string,
      start: BigNumberish,
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _synthetixAdapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "init(address)"(
      _synthetixAdapter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "initialized()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketAddresses(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominateNewOwner(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "nominateNewOwner(address)"(
      _owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nominatedOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "nominatedOwner()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionMarkets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "optionMarkets(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeMarket(
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeMarket(address)"(
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    synthetixAdapter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "synthetixAdapter()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
