/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type LiquidityPoolParametersStruct = {
  minDepositWithdraw: BigNumberish;
  depositDelay: BigNumberish;
  withdrawalDelay: BigNumberish;
  withdrawalFee: BigNumberish;
  liquidityCBThreshold: BigNumberish;
  liquidityCBTimeout: BigNumberish;
  ivVarianceCBThreshold: BigNumberish;
  skewVarianceCBThreshold: BigNumberish;
  ivVarianceCBTimeout: BigNumberish;
  skewVarianceCBTimeout: BigNumberish;
  guardianMultisig: string;
  guardianDelay: BigNumberish;
  boardSettlementCBTimeout: BigNumberish;
  maxFeePaid: BigNumberish;
};

export type LiquidityPoolParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  minDepositWithdraw: BigNumber;
  depositDelay: BigNumber;
  withdrawalDelay: BigNumber;
  withdrawalFee: BigNumber;
  liquidityCBThreshold: BigNumber;
  liquidityCBTimeout: BigNumber;
  ivVarianceCBThreshold: BigNumber;
  skewVarianceCBThreshold: BigNumber;
  ivVarianceCBTimeout: BigNumber;
  skewVarianceCBTimeout: BigNumber;
  guardianMultisig: string;
  guardianDelay: BigNumber;
  boardSettlementCBTimeout: BigNumber;
  maxFeePaid: BigNumber;
};

export type LiquidityStruct = {
  freeLiquidity: BigNumberish;
  burnableLiquidity: BigNumberish;
  usedCollatLiquidity: BigNumberish;
  pendingDeltaLiquidity: BigNumberish;
  usedDeltaLiquidity: BigNumberish;
  NAV: BigNumberish;
};

export type LiquidityStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  freeLiquidity: BigNumber;
  burnableLiquidity: BigNumber;
  usedCollatLiquidity: BigNumber;
  pendingDeltaLiquidity: BigNumber;
  usedDeltaLiquidity: BigNumber;
  NAV: BigNumber;
};

export type CollateralStruct = { quote: BigNumberish; base: BigNumberish };

export type CollateralStructOutput = [BigNumber, BigNumber] & {
  quote: BigNumber;
  base: BigNumber;
};

export type QueuedDepositStruct = {
  id: BigNumberish;
  beneficiary: string;
  amountLiquidity: BigNumberish;
  mintedTokens: BigNumberish;
  depositInitiatedTime: BigNumberish;
};

export type QueuedDepositStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  beneficiary: string;
  amountLiquidity: BigNumber;
  mintedTokens: BigNumber;
  depositInitiatedTime: BigNumber;
};

export type QueuedWithdrawalStruct = {
  id: BigNumberish;
  beneficiary: string;
  amountTokens: BigNumberish;
  quoteSent: BigNumberish;
  withdrawInitiatedTime: BigNumberish;
};

export type QueuedWithdrawalStructOutput = [
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  beneficiary: string;
  amountTokens: BigNumber;
  quoteSent: BigNumber;
  withdrawInitiatedTime: BigNumber;
};

export interface ILiquidityPoolInterface extends utils.Interface {
  functions: {
    "CBTimestamp()": FunctionFragment;
    "exchangeBase()": FunctionFragment;
    "getCurrentLiquidity()": FunctionFragment;
    "getLiquidity(uint256)": FunctionFragment;
    "getLpParams()": FunctionFragment;
    "getTokenPrice()": FunctionFragment;
    "getTokenPriceWithCheck()": FunctionFragment;
    "getTotalPoolValueQuote()": FunctionFragment;
    "getTotalTokenSupply()": FunctionFragment;
    "initiateDeposit(address,uint256)": FunctionFragment;
    "initiateWithdraw(address,uint256)": FunctionFragment;
    "insolventSettlementAmount()": FunctionFragment;
    "liquidationInsolventAmount()": FunctionFragment;
    "lockedCollateral()": FunctionFragment;
    "nextQueuedDepositId()": FunctionFragment;
    "nextQueuedWithdrawalId()": FunctionFragment;
    "poolHedger()": FunctionFragment;
    "processDepositQueue(uint256)": FunctionFragment;
    "processWithdrawalQueue(uint256)": FunctionFragment;
    "queuedDepositHead()": FunctionFragment;
    "queuedDeposits(uint256)": FunctionFragment;
    "queuedWithdrawalHead()": FunctionFragment;
    "queuedWithdrawals(uint256)": FunctionFragment;
    "totalOutstandingSettlements()": FunctionFragment;
    "totalQueuedDeposits()": FunctionFragment;
    "totalQueuedWithdrawals()": FunctionFragment;
    "updateCBs()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CBTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeBase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLpParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPriceWithCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPoolValueQuote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalTokenSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insolventSettlementAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationInsolventAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockedCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextQueuedDepositId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextQueuedWithdrawalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolHedger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processDepositQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processWithdrawalQueue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedDepositHead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queuedDeposits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "queuedWithdrawalHead",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queuedWithdrawals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalOutstandingSettlements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQueuedDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQueuedWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "updateCBs", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CBTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLpParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPriceWithCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPoolValueQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalTokenSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insolventSettlementAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationInsolventAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextQueuedDepositId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextQueuedWithdrawalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolHedger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processDepositQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWithdrawalQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedDepositHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedWithdrawalHead",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOutstandingSettlements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQueuedDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQueuedWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateCBs", data: BytesLike): Result;

  events: {
    "BaseFreed(uint256,uint256)": EventFragment;
    "BaseLocked(uint256,uint256)": EventFragment;
    "BasePurchased(uint256,uint256)": EventFragment;
    "BaseSold(uint256,uint256)": EventFragment;
    "BoardSettlement(uint256,uint256,uint256)": EventFragment;
    "BoardSettlementCircuitBreakerUpdated(uint256)": EventFragment;
    "CheckingCanProcess(uint256,bool,bool,bool,bool)": EventFragment;
    "CircuitBreakerUpdated(uint256,bool,bool,bool)": EventFragment;
    "DepositProcessed(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "DepositQueued(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "InsolventSettlementAmountUpdated(uint256,uint256)": EventFragment;
    "LiquidityPoolParametersUpdated(tuple)": EventFragment;
    "OutstandingSettlementSent(address,uint256,uint256)": EventFragment;
    "PoolHedgerUpdated(address)": EventFragment;
    "PremiumTransferred(address,uint256,uint256)": EventFragment;
    "QuoteFreed(uint256,uint256)": EventFragment;
    "QuoteLocked(uint256,uint256)": EventFragment;
    "QuoteTransferredToPoolHedger(uint256)": EventFragment;
    "WithdrawPartiallyProcessed(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawProcessed(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawQueued(address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseFreed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BasePurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoardSettlement"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BoardSettlementCircuitBreakerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CheckingCanProcess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CircuitBreakerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositQueued"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InsolventSettlementAmountUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiquidityPoolParametersUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OutstandingSettlementSent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolHedgerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteFreed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuoteLocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "QuoteTransferredToPoolHedger"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawPartiallyProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawProcessed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawQueued"): EventFragment;
}

export type BaseFreedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { baseFreed: BigNumber; lockedCollateralBase: BigNumber }
>;

export type BaseFreedEventFilter = TypedEventFilter<BaseFreedEvent>;

export type BaseLockedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { baseLocked: BigNumber; lockedCollateralBase: BigNumber }
>;

export type BaseLockedEventFilter = TypedEventFilter<BaseLockedEvent>;

export type BasePurchasedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { quoteSpent: BigNumber; baseReceived: BigNumber }
>;

export type BasePurchasedEventFilter = TypedEventFilter<BasePurchasedEvent>;

export type BaseSoldEvent = TypedEvent<
  [BigNumber, BigNumber],
  { amountBase: BigNumber; quoteReceived: BigNumber }
>;

export type BaseSoldEventFilter = TypedEventFilter<BaseSoldEvent>;

export type BoardSettlementEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  {
    insolventSettlementAmount: BigNumber;
    amountQuoteReserved: BigNumber;
    totalOutstandingSettlements: BigNumber;
  }
>;

export type BoardSettlementEventFilter = TypedEventFilter<BoardSettlementEvent>;

export type BoardSettlementCircuitBreakerUpdatedEvent = TypedEvent<
  [BigNumber],
  { newTimestamp: BigNumber }
>;

export type BoardSettlementCircuitBreakerUpdatedEventFilter =
  TypedEventFilter<BoardSettlementCircuitBreakerUpdatedEvent>;

export type CheckingCanProcessEvent = TypedEvent<
  [BigNumber, boolean, boolean, boolean, boolean],
  {
    entryId: BigNumber;
    boardNotStale: boolean;
    validEntry: boolean;
    guardianBypass: boolean;
    delaysExpired: boolean;
  }
>;

export type CheckingCanProcessEventFilter =
  TypedEventFilter<CheckingCanProcessEvent>;

export type CircuitBreakerUpdatedEvent = TypedEvent<
  [BigNumber, boolean, boolean, boolean],
  {
    newTimestamp: BigNumber;
    ivVarianceThresholdCrossed: boolean;
    skewVarianceThresholdCrossed: boolean;
    liquidityThresholdCrossed: boolean;
  }
>;

export type CircuitBreakerUpdatedEventFilter =
  TypedEventFilter<CircuitBreakerUpdatedEvent>;

export type DepositProcessedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    caller: string;
    beneficiary: string;
    depositQueueId: BigNumber;
    amountDeposited: BigNumber;
    tokenPrice: BigNumber;
    tokensReceived: BigNumber;
    timestamp: BigNumber;
  }
>;

export type DepositProcessedEventFilter =
  TypedEventFilter<DepositProcessedEvent>;

export type DepositQueuedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    depositor: string;
    beneficiary: string;
    depositQueueId: BigNumber;
    amountDeposited: BigNumber;
    totalQueuedDeposits: BigNumber;
    timestamp: BigNumber;
  }
>;

export type DepositQueuedEventFilter = TypedEventFilter<DepositQueuedEvent>;

export type InsolventSettlementAmountUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { amountQuoteAdded: BigNumber; totalInsolventSettlementAmount: BigNumber }
>;

export type InsolventSettlementAmountUpdatedEventFilter =
  TypedEventFilter<InsolventSettlementAmountUpdatedEvent>;

export type LiquidityPoolParametersUpdatedEvent = TypedEvent<
  [LiquidityPoolParametersStructOutput],
  { lpParams: LiquidityPoolParametersStructOutput }
>;

export type LiquidityPoolParametersUpdatedEventFilter =
  TypedEventFilter<LiquidityPoolParametersUpdatedEvent>;

export type OutstandingSettlementSentEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; amount: BigNumber; totalOutstandingSettlements: BigNumber }
>;

export type OutstandingSettlementSentEventFilter =
  TypedEventFilter<OutstandingSettlementSentEvent>;

export type PoolHedgerUpdatedEvent = TypedEvent<
  [string],
  { poolHedger: string }
>;

export type PoolHedgerUpdatedEventFilter =
  TypedEventFilter<PoolHedgerUpdatedEvent>;

export type PremiumTransferredEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {
    recipient: string;
    recipientPortion: BigNumber;
    optionMarketPortion: BigNumber;
  }
>;

export type PremiumTransferredEventFilter =
  TypedEventFilter<PremiumTransferredEvent>;

export type QuoteFreedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { quoteFreed: BigNumber; lockedCollateralQuote: BigNumber }
>;

export type QuoteFreedEventFilter = TypedEventFilter<QuoteFreedEvent>;

export type QuoteLockedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { quoteLocked: BigNumber; lockedCollateralQuote: BigNumber }
>;

export type QuoteLockedEventFilter = TypedEventFilter<QuoteLockedEvent>;

export type QuoteTransferredToPoolHedgerEvent = TypedEvent<
  [BigNumber],
  { amountQuote: BigNumber }
>;

export type QuoteTransferredToPoolHedgerEventFilter =
  TypedEventFilter<QuoteTransferredToPoolHedgerEvent>;

export type WithdrawPartiallyProcessedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    caller: string;
    beneficiary: string;
    withdrawalQueueId: BigNumber;
    amountWithdrawn: BigNumber;
    tokenPrice: BigNumber;
    quoteReceived: BigNumber;
    totalQueuedWithdrawals: BigNumber;
    timestamp: BigNumber;
  }
>;

export type WithdrawPartiallyProcessedEventFilter =
  TypedEventFilter<WithdrawPartiallyProcessedEvent>;

export type WithdrawProcessedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    caller: string;
    beneficiary: string;
    withdrawalQueueId: BigNumber;
    amountWithdrawn: BigNumber;
    tokenPrice: BigNumber;
    quoteReceived: BigNumber;
    totalQueuedWithdrawals: BigNumber;
    timestamp: BigNumber;
  }
>;

export type WithdrawProcessedEventFilter =
  TypedEventFilter<WithdrawProcessedEvent>;

export type WithdrawQueuedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    withdrawer: string;
    beneficiary: string;
    withdrawalQueueId: BigNumber;
    amountWithdrawn: BigNumber;
    totalQueuedWithdrawals: BigNumber;
    timestamp: BigNumber;
  }
>;

export type WithdrawQueuedEventFilter = TypedEventFilter<WithdrawQueuedEvent>;

export interface ILiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CBTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    "CBTimestamp()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeBase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exchangeBase()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentLiquidity(
      overrides?: CallOverrides
    ): Promise<[LiquidityStructOutput]>;

    "getCurrentLiquidity()"(
      overrides?: CallOverrides
    ): Promise<[LiquidityStructOutput]>;

    getLiquidity(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LiquidityStructOutput]>;

    "getLiquidity(uint256)"(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[LiquidityStructOutput]>;

    getLpParams(
      overrides?: CallOverrides
    ): Promise<[LiquidityPoolParametersStructOutput]>;

    "getLpParams()"(
      overrides?: CallOverrides
    ): Promise<[LiquidityPoolParametersStructOutput]>;

    getTokenPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTokenPrice()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenPriceWithCheck(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        tokenPrice: BigNumber;
        isStale: boolean;
        circuitBreakerExpiry: BigNumber;
      }
    >;

    "getTokenPriceWithCheck()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        tokenPrice: BigNumber;
        isStale: boolean;
        circuitBreakerExpiry: BigNumber;
      }
    >;

    getTotalPoolValueQuote(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalPoolValueQuote()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalTokenSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getTotalTokenSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    initiateDeposit(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initiateDeposit(address,uint256)"(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateWithdraw(
      beneficiary: string,
      amountLiquidityToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initiateWithdraw(address,uint256)"(
      beneficiary: string,
      amountLiquidityToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    insolventSettlementAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "insolventSettlementAmount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidationInsolventAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "liquidationInsolventAmount()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockedCollateral(
      overrides?: CallOverrides
    ): Promise<[CollateralStructOutput]>;

    "lockedCollateral()"(
      overrides?: CallOverrides
    ): Promise<[CollateralStructOutput]>;

    nextQueuedDepositId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextQueuedDepositId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "nextQueuedWithdrawalId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolHedger(overrides?: CallOverrides): Promise<[string]>;

    "poolHedger()"(overrides?: CallOverrides): Promise<[string]>;

    processDepositQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "processDepositQueue(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    processWithdrawalQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "processWithdrawalQueue(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queuedDepositHead(overrides?: CallOverrides): Promise<[BigNumber]>;

    "queuedDepositHead()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    queuedDeposits(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[QueuedDepositStructOutput]>;

    "queuedDeposits(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[QueuedDepositStructOutput]>;

    queuedWithdrawalHead(overrides?: CallOverrides): Promise<[BigNumber]>;

    "queuedWithdrawalHead()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    queuedWithdrawals(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[QueuedWithdrawalStructOutput]>;

    "queuedWithdrawals(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[QueuedWithdrawalStructOutput]>;

    totalOutstandingSettlements(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalOutstandingSettlements()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalQueuedDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalQueuedDeposits()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalQueuedWithdrawals(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalQueuedWithdrawals()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateCBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateCBs()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CBTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  "CBTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeBase(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exchangeBase()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentLiquidity(
    overrides?: CallOverrides
  ): Promise<LiquidityStructOutput>;

  "getCurrentLiquidity()"(
    overrides?: CallOverrides
  ): Promise<LiquidityStructOutput>;

  getLiquidity(
    spotPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LiquidityStructOutput>;

  "getLiquidity(uint256)"(
    spotPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<LiquidityStructOutput>;

  getLpParams(
    overrides?: CallOverrides
  ): Promise<LiquidityPoolParametersStructOutput>;

  "getLpParams()"(
    overrides?: CallOverrides
  ): Promise<LiquidityPoolParametersStructOutput>;

  getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "getTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenPriceWithCheck(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      tokenPrice: BigNumber;
      isStale: boolean;
      circuitBreakerExpiry: BigNumber;
    }
  >;

  "getTokenPriceWithCheck()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      tokenPrice: BigNumber;
      isStale: boolean;
      circuitBreakerExpiry: BigNumber;
    }
  >;

  getTotalPoolValueQuote(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalPoolValueQuote()"(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "getTotalTokenSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  initiateDeposit(
    beneficiary: string,
    amountQuote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initiateDeposit(address,uint256)"(
    beneficiary: string,
    amountQuote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateWithdraw(
    beneficiary: string,
    amountLiquidityToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initiateWithdraw(address,uint256)"(
    beneficiary: string,
    amountLiquidityToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  insolventSettlementAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "insolventSettlementAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationInsolventAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "liquidationInsolventAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockedCollateral(overrides?: CallOverrides): Promise<CollateralStructOutput>;

  "lockedCollateral()"(
    overrides?: CallOverrides
  ): Promise<CollateralStructOutput>;

  nextQueuedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextQueuedDepositId()"(overrides?: CallOverrides): Promise<BigNumber>;

  nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<BigNumber>;

  "nextQueuedWithdrawalId()"(overrides?: CallOverrides): Promise<BigNumber>;

  poolHedger(overrides?: CallOverrides): Promise<string>;

  "poolHedger()"(overrides?: CallOverrides): Promise<string>;

  processDepositQueue(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "processDepositQueue(uint256)"(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  processWithdrawalQueue(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "processWithdrawalQueue(uint256)"(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queuedDepositHead(overrides?: CallOverrides): Promise<BigNumber>;

  "queuedDepositHead()"(overrides?: CallOverrides): Promise<BigNumber>;

  queuedDeposits(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<QueuedDepositStructOutput>;

  "queuedDeposits(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<QueuedDepositStructOutput>;

  queuedWithdrawalHead(overrides?: CallOverrides): Promise<BigNumber>;

  "queuedWithdrawalHead()"(overrides?: CallOverrides): Promise<BigNumber>;

  queuedWithdrawals(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<QueuedWithdrawalStructOutput>;

  "queuedWithdrawals(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<QueuedWithdrawalStructOutput>;

  totalOutstandingSettlements(overrides?: CallOverrides): Promise<BigNumber>;

  "totalOutstandingSettlements()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalQueuedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  "totalQueuedDeposits()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalQueuedWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

  "totalQueuedWithdrawals()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateCBs(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateCBs()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CBTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "CBTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeBase(overrides?: CallOverrides): Promise<void>;

    "exchangeBase()"(overrides?: CallOverrides): Promise<void>;

    getCurrentLiquidity(
      overrides?: CallOverrides
    ): Promise<LiquidityStructOutput>;

    "getCurrentLiquidity()"(
      overrides?: CallOverrides
    ): Promise<LiquidityStructOutput>;

    getLiquidity(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LiquidityStructOutput>;

    "getLiquidity(uint256)"(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<LiquidityStructOutput>;

    getLpParams(
      overrides?: CallOverrides
    ): Promise<LiquidityPoolParametersStructOutput>;

    "getLpParams()"(
      overrides?: CallOverrides
    ): Promise<LiquidityPoolParametersStructOutput>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceWithCheck(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        tokenPrice: BigNumber;
        isStale: boolean;
        circuitBreakerExpiry: BigNumber;
      }
    >;

    "getTokenPriceWithCheck()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        tokenPrice: BigNumber;
        isStale: boolean;
        circuitBreakerExpiry: BigNumber;
      }
    >;

    getTotalPoolValueQuote(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalPoolValueQuote()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalTokenSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    initiateDeposit(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initiateDeposit(address,uint256)"(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateWithdraw(
      beneficiary: string,
      amountLiquidityToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initiateWithdraw(address,uint256)"(
      beneficiary: string,
      amountLiquidityToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    insolventSettlementAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "insolventSettlementAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationInsolventAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationInsolventAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedCollateral(
      overrides?: CallOverrides
    ): Promise<CollateralStructOutput>;

    "lockedCollateral()"(
      overrides?: CallOverrides
    ): Promise<CollateralStructOutput>;

    nextQueuedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextQueuedDepositId()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextQueuedWithdrawalId()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolHedger(overrides?: CallOverrides): Promise<string>;

    "poolHedger()"(overrides?: CallOverrides): Promise<string>;

    processDepositQueue(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "processDepositQueue(uint256)"(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    processWithdrawalQueue(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "processWithdrawalQueue(uint256)"(
      limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    queuedDepositHead(overrides?: CallOverrides): Promise<BigNumber>;

    "queuedDepositHead()"(overrides?: CallOverrides): Promise<BigNumber>;

    queuedDeposits(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<QueuedDepositStructOutput>;

    "queuedDeposits(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<QueuedDepositStructOutput>;

    queuedWithdrawalHead(overrides?: CallOverrides): Promise<BigNumber>;

    "queuedWithdrawalHead()"(overrides?: CallOverrides): Promise<BigNumber>;

    queuedWithdrawals(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<QueuedWithdrawalStructOutput>;

    "queuedWithdrawals(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<QueuedWithdrawalStructOutput>;

    totalOutstandingSettlements(overrides?: CallOverrides): Promise<BigNumber>;

    "totalOutstandingSettlements()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalQueuedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    "totalQueuedDeposits()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    "totalQueuedWithdrawals()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateCBs(overrides?: CallOverrides): Promise<void>;

    "updateCBs()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BaseFreed(uint256,uint256)"(
      baseFreed?: null,
      lockedCollateralBase?: null
    ): BaseFreedEventFilter;
    BaseFreed(
      baseFreed?: null,
      lockedCollateralBase?: null
    ): BaseFreedEventFilter;

    "BaseLocked(uint256,uint256)"(
      baseLocked?: null,
      lockedCollateralBase?: null
    ): BaseLockedEventFilter;
    BaseLocked(
      baseLocked?: null,
      lockedCollateralBase?: null
    ): BaseLockedEventFilter;

    "BasePurchased(uint256,uint256)"(
      quoteSpent?: null,
      baseReceived?: null
    ): BasePurchasedEventFilter;
    BasePurchased(
      quoteSpent?: null,
      baseReceived?: null
    ): BasePurchasedEventFilter;

    "BaseSold(uint256,uint256)"(
      amountBase?: null,
      quoteReceived?: null
    ): BaseSoldEventFilter;
    BaseSold(amountBase?: null, quoteReceived?: null): BaseSoldEventFilter;

    "BoardSettlement(uint256,uint256,uint256)"(
      insolventSettlementAmount?: null,
      amountQuoteReserved?: null,
      totalOutstandingSettlements?: null
    ): BoardSettlementEventFilter;
    BoardSettlement(
      insolventSettlementAmount?: null,
      amountQuoteReserved?: null,
      totalOutstandingSettlements?: null
    ): BoardSettlementEventFilter;

    "BoardSettlementCircuitBreakerUpdated(uint256)"(
      newTimestamp?: null
    ): BoardSettlementCircuitBreakerUpdatedEventFilter;
    BoardSettlementCircuitBreakerUpdated(
      newTimestamp?: null
    ): BoardSettlementCircuitBreakerUpdatedEventFilter;

    "CheckingCanProcess(uint256,bool,bool,bool,bool)"(
      entryId?: null,
      boardNotStale?: null,
      validEntry?: null,
      guardianBypass?: null,
      delaysExpired?: null
    ): CheckingCanProcessEventFilter;
    CheckingCanProcess(
      entryId?: null,
      boardNotStale?: null,
      validEntry?: null,
      guardianBypass?: null,
      delaysExpired?: null
    ): CheckingCanProcessEventFilter;

    "CircuitBreakerUpdated(uint256,bool,bool,bool)"(
      newTimestamp?: null,
      ivVarianceThresholdCrossed?: null,
      skewVarianceThresholdCrossed?: null,
      liquidityThresholdCrossed?: null
    ): CircuitBreakerUpdatedEventFilter;
    CircuitBreakerUpdated(
      newTimestamp?: null,
      ivVarianceThresholdCrossed?: null,
      skewVarianceThresholdCrossed?: null,
      liquidityThresholdCrossed?: null
    ): CircuitBreakerUpdatedEventFilter;

    "DepositProcessed(address,address,uint256,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      beneficiary?: string | null,
      depositQueueId?: BigNumberish | null,
      amountDeposited?: null,
      tokenPrice?: null,
      tokensReceived?: null,
      timestamp?: null
    ): DepositProcessedEventFilter;
    DepositProcessed(
      caller?: string | null,
      beneficiary?: string | null,
      depositQueueId?: BigNumberish | null,
      amountDeposited?: null,
      tokenPrice?: null,
      tokensReceived?: null,
      timestamp?: null
    ): DepositProcessedEventFilter;

    "DepositQueued(address,address,uint256,uint256,uint256,uint256)"(
      depositor?: string | null,
      beneficiary?: string | null,
      depositQueueId?: BigNumberish | null,
      amountDeposited?: null,
      totalQueuedDeposits?: null,
      timestamp?: null
    ): DepositQueuedEventFilter;
    DepositQueued(
      depositor?: string | null,
      beneficiary?: string | null,
      depositQueueId?: BigNumberish | null,
      amountDeposited?: null,
      totalQueuedDeposits?: null,
      timestamp?: null
    ): DepositQueuedEventFilter;

    "InsolventSettlementAmountUpdated(uint256,uint256)"(
      amountQuoteAdded?: null,
      totalInsolventSettlementAmount?: null
    ): InsolventSettlementAmountUpdatedEventFilter;
    InsolventSettlementAmountUpdated(
      amountQuoteAdded?: null,
      totalInsolventSettlementAmount?: null
    ): InsolventSettlementAmountUpdatedEventFilter;

    "LiquidityPoolParametersUpdated(tuple)"(
      lpParams?: null
    ): LiquidityPoolParametersUpdatedEventFilter;
    LiquidityPoolParametersUpdated(
      lpParams?: null
    ): LiquidityPoolParametersUpdatedEventFilter;

    "OutstandingSettlementSent(address,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      totalOutstandingSettlements?: null
    ): OutstandingSettlementSentEventFilter;
    OutstandingSettlementSent(
      user?: string | null,
      amount?: null,
      totalOutstandingSettlements?: null
    ): OutstandingSettlementSentEventFilter;

    "PoolHedgerUpdated(address)"(
      poolHedger?: null
    ): PoolHedgerUpdatedEventFilter;
    PoolHedgerUpdated(poolHedger?: null): PoolHedgerUpdatedEventFilter;

    "PremiumTransferred(address,uint256,uint256)"(
      recipient?: string | null,
      recipientPortion?: null,
      optionMarketPortion?: null
    ): PremiumTransferredEventFilter;
    PremiumTransferred(
      recipient?: string | null,
      recipientPortion?: null,
      optionMarketPortion?: null
    ): PremiumTransferredEventFilter;

    "QuoteFreed(uint256,uint256)"(
      quoteFreed?: null,
      lockedCollateralQuote?: null
    ): QuoteFreedEventFilter;
    QuoteFreed(
      quoteFreed?: null,
      lockedCollateralQuote?: null
    ): QuoteFreedEventFilter;

    "QuoteLocked(uint256,uint256)"(
      quoteLocked?: null,
      lockedCollateralQuote?: null
    ): QuoteLockedEventFilter;
    QuoteLocked(
      quoteLocked?: null,
      lockedCollateralQuote?: null
    ): QuoteLockedEventFilter;

    "QuoteTransferredToPoolHedger(uint256)"(
      amountQuote?: null
    ): QuoteTransferredToPoolHedgerEventFilter;
    QuoteTransferredToPoolHedger(
      amountQuote?: null
    ): QuoteTransferredToPoolHedgerEventFilter;

    "WithdrawPartiallyProcessed(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawPartiallyProcessedEventFilter;
    WithdrawPartiallyProcessed(
      caller?: string | null,
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawPartiallyProcessedEventFilter;

    "WithdrawProcessed(address,address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      caller?: string | null,
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawProcessedEventFilter;
    WithdrawProcessed(
      caller?: string | null,
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      tokenPrice?: null,
      quoteReceived?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawProcessedEventFilter;

    "WithdrawQueued(address,address,uint256,uint256,uint256,uint256)"(
      withdrawer?: string | null,
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawQueuedEventFilter;
    WithdrawQueued(
      withdrawer?: string | null,
      beneficiary?: string | null,
      withdrawalQueueId?: BigNumberish | null,
      amountWithdrawn?: null,
      totalQueuedWithdrawals?: null,
      timestamp?: null
    ): WithdrawQueuedEventFilter;
  };

  estimateGas: {
    CBTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    "CBTimestamp()"(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeBase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exchangeBase()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentLiquidity()"(overrides?: CallOverrides): Promise<BigNumber>;

    getLiquidity(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getLiquidity(uint256)"(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getLpParams(overrides?: CallOverrides): Promise<BigNumber>;

    "getLpParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenPriceWithCheck(overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenPriceWithCheck()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPoolValueQuote(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalPoolValueQuote()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalTokenSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getTotalTokenSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    initiateDeposit(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initiateDeposit(address,uint256)"(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateWithdraw(
      beneficiary: string,
      amountLiquidityToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initiateWithdraw(address,uint256)"(
      beneficiary: string,
      amountLiquidityToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    insolventSettlementAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "insolventSettlementAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidationInsolventAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidationInsolventAmount()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockedCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    "lockedCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextQueuedDepositId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextQueuedDepositId()"(overrides?: CallOverrides): Promise<BigNumber>;

    nextQueuedWithdrawalId(overrides?: CallOverrides): Promise<BigNumber>;

    "nextQueuedWithdrawalId()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolHedger(overrides?: CallOverrides): Promise<BigNumber>;

    "poolHedger()"(overrides?: CallOverrides): Promise<BigNumber>;

    processDepositQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "processDepositQueue(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    processWithdrawalQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "processWithdrawalQueue(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queuedDepositHead(overrides?: CallOverrides): Promise<BigNumber>;

    "queuedDepositHead()"(overrides?: CallOverrides): Promise<BigNumber>;

    queuedDeposits(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queuedDeposits(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queuedWithdrawalHead(overrides?: CallOverrides): Promise<BigNumber>;

    "queuedWithdrawalHead()"(overrides?: CallOverrides): Promise<BigNumber>;

    queuedWithdrawals(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queuedWithdrawals(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalOutstandingSettlements(overrides?: CallOverrides): Promise<BigNumber>;

    "totalOutstandingSettlements()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalQueuedDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    "totalQueuedDeposits()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalQueuedWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    "totalQueuedWithdrawals()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateCBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateCBs()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CBTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "CBTimestamp()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeBase(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exchangeBase()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentLiquidity()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLiquidity(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLiquidity(uint256)"(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLpParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getLpParams()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getTokenPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenPriceWithCheck(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenPriceWithCheck()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalPoolValueQuote(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalPoolValueQuote()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalTokenSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTotalTokenSupply()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateDeposit(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initiateDeposit(address,uint256)"(
      beneficiary: string,
      amountQuote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateWithdraw(
      beneficiary: string,
      amountLiquidityToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initiateWithdraw(address,uint256)"(
      beneficiary: string,
      amountLiquidityToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    insolventSettlementAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "insolventSettlementAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationInsolventAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liquidationInsolventAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockedCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockedCollateral()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextQueuedDepositId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextQueuedDepositId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextQueuedWithdrawalId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nextQueuedWithdrawalId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolHedger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolHedger()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    processDepositQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "processDepositQueue(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    processWithdrawalQueue(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "processWithdrawalQueue(uint256)"(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queuedDepositHead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "queuedDepositHead()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queuedDeposits(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queuedDeposits(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queuedWithdrawalHead(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queuedWithdrawalHead()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queuedWithdrawals(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queuedWithdrawals(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalOutstandingSettlements(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalOutstandingSettlements()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalQueuedDeposits(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalQueuedDeposits()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalQueuedWithdrawals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalQueuedWithdrawals()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCBs(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateCBs()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
