/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type NetGreeksStruct = {
  netDelta: BigNumberish;
  netStdVega: BigNumberish;
  netOptionValue: BigNumberish;
};

export type NetGreeksStructOutput = [BigNumber, BigNumber, BigNumber] & {
  netDelta: BigNumber;
  netStdVega: BigNumber;
  netOptionValue: BigNumber;
};

export type OptionBoardCacheStruct = {
  id: BigNumberish;
  strikes: BigNumberish[];
  expiry: BigNumberish;
  iv: BigNumberish;
  netGreeks: NetGreeksStruct;
  updatedAt: BigNumberish;
  updatedAtPrice: BigNumberish;
  maxSkewVariance: BigNumberish;
  ivVariance: BigNumberish;
};

export type OptionBoardCacheStructOutput = [
  BigNumber,
  BigNumber[],
  BigNumber,
  BigNumber,
  NetGreeksStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  strikes: BigNumber[];
  expiry: BigNumber;
  iv: BigNumber;
  netGreeks: NetGreeksStructOutput;
  updatedAt: BigNumber;
  updatedAtPrice: BigNumber;
  maxSkewVariance: BigNumber;
  ivVariance: BigNumber;
};

export type ForceCloseParametersStruct = {
  ivGWAVPeriod: BigNumberish;
  skewGWAVPeriod: BigNumberish;
  shortVolShock: BigNumberish;
  shortPostCutoffVolShock: BigNumberish;
  longVolShock: BigNumberish;
  longPostCutoffVolShock: BigNumberish;
  liquidateVolShock: BigNumberish;
  liquidatePostCutoffVolShock: BigNumberish;
  shortSpotMin: BigNumberish;
  liquidateSpotMin: BigNumberish;
};

export type ForceCloseParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  ivGWAVPeriod: BigNumber;
  skewGWAVPeriod: BigNumber;
  shortVolShock: BigNumber;
  shortPostCutoffVolShock: BigNumber;
  longVolShock: BigNumber;
  longPostCutoffVolShock: BigNumber;
  liquidateVolShock: BigNumber;
  liquidatePostCutoffVolShock: BigNumber;
  shortSpotMin: BigNumber;
  liquidateSpotMin: BigNumber;
};

export type GlobalCacheStruct = {
  minUpdatedAt: BigNumberish;
  minUpdatedAtPrice: BigNumberish;
  maxUpdatedAtPrice: BigNumberish;
  maxSkewVariance: BigNumberish;
  maxIvVariance: BigNumberish;
  netGreeks: NetGreeksStruct;
};

export type GlobalCacheStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  NetGreeksStructOutput
] & {
  minUpdatedAt: BigNumber;
  minUpdatedAtPrice: BigNumber;
  maxUpdatedAtPrice: BigNumber;
  maxSkewVariance: BigNumber;
  maxIvVariance: BigNumber;
  netGreeks: NetGreeksStructOutput;
};

export type GreekCacheParametersStruct = {
  maxStrikesPerBoard: BigNumberish;
  acceptableSpotPricePercentMove: BigNumberish;
  staleUpdateDuration: BigNumberish;
  varianceIvGWAVPeriod: BigNumberish;
  varianceSkewGWAVPeriod: BigNumberish;
  optionValueIvGWAVPeriod: BigNumberish;
  optionValueSkewGWAVPeriod: BigNumberish;
  gwavSkewFloor: BigNumberish;
  gwavSkewCap: BigNumberish;
  rateAndCarry: BigNumberish;
};

export type GreekCacheParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  maxStrikesPerBoard: BigNumber;
  acceptableSpotPricePercentMove: BigNumber;
  staleUpdateDuration: BigNumber;
  varianceIvGWAVPeriod: BigNumber;
  varianceSkewGWAVPeriod: BigNumber;
  optionValueIvGWAVPeriod: BigNumber;
  optionValueSkewGWAVPeriod: BigNumber;
  gwavSkewFloor: BigNumber;
  gwavSkewCap: BigNumber;
  rateAndCarry: BigNumber;
};

export type MinCollateralParametersStruct = {
  minStaticQuoteCollateral: BigNumberish;
  minStaticBaseCollateral: BigNumberish;
  shockVolA: BigNumberish;
  shockVolPointA: BigNumberish;
  shockVolB: BigNumberish;
  shockVolPointB: BigNumberish;
  callSpotPriceShock: BigNumberish;
  putSpotPriceShock: BigNumberish;
};

export type MinCollateralParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  minStaticQuoteCollateral: BigNumber;
  minStaticBaseCollateral: BigNumber;
  shockVolA: BigNumber;
  shockVolPointA: BigNumber;
  shockVolB: BigNumber;
  shockVolPointB: BigNumber;
  callSpotPriceShock: BigNumber;
  putSpotPriceShock: BigNumber;
};

export type StrikeGreeksStruct = {
  callDelta: BigNumberish;
  putDelta: BigNumberish;
  stdVega: BigNumberish;
  callPrice: BigNumberish;
  putPrice: BigNumberish;
};

export type StrikeGreeksStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  callDelta: BigNumber;
  putDelta: BigNumber;
  stdVega: BigNumber;
  callPrice: BigNumber;
  putPrice: BigNumber;
};

export type StrikeCacheStruct = {
  id: BigNumberish;
  boardId: BigNumberish;
  strikePrice: BigNumberish;
  skew: BigNumberish;
  greeks: StrikeGreeksStruct;
  callExposure: BigNumberish;
  putExposure: BigNumberish;
  skewVariance: BigNumberish;
};

export type StrikeCacheStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  StrikeGreeksStructOutput,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  boardId: BigNumber;
  strikePrice: BigNumber;
  skew: BigNumber;
  greeks: StrikeGreeksStructOutput;
  callExposure: BigNumber;
  putExposure: BigNumber;
  skewVariance: BigNumber;
};

export type BoardGreeksViewStruct = {
  boardGreeks: NetGreeksStruct;
  ivGWAV: BigNumberish;
  strikeGreeks: StrikeGreeksStruct[];
  skewGWAVs: BigNumberish[];
};

export type BoardGreeksViewStructOutput = [
  NetGreeksStructOutput,
  BigNumber,
  StrikeGreeksStructOutput[],
  BigNumber[]
] & {
  boardGreeks: NetGreeksStructOutput;
  ivGWAV: BigNumber;
  strikeGreeks: StrikeGreeksStructOutput[];
  skewGWAVs: BigNumber[];
};

export type LiquidityStruct = {
  freeLiquidity: BigNumberish;
  burnableLiquidity: BigNumberish;
  usedCollatLiquidity: BigNumberish;
  pendingDeltaLiquidity: BigNumberish;
  usedDeltaLiquidity: BigNumberish;
  NAV: BigNumberish;
};

export type LiquidityStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  freeLiquidity: BigNumber;
  burnableLiquidity: BigNumber;
  usedCollatLiquidity: BigNumber;
  pendingDeltaLiquidity: BigNumber;
  usedDeltaLiquidity: BigNumber;
  NAV: BigNumber;
};

export type ExchangeParamsStruct = {
  spotPrice: BigNumberish;
  quoteKey: BytesLike;
  baseKey: BytesLike;
  quoteBaseFeeRate: BigNumberish;
  baseQuoteFeeRate: BigNumberish;
};

export type ExchangeParamsStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  spotPrice: BigNumber;
  quoteKey: string;
  baseKey: string;
  quoteBaseFeeRate: BigNumber;
  baseQuoteFeeRate: BigNumber;
};

export type TradeParametersStruct = {
  isBuy: boolean;
  isForceClose: boolean;
  tradeDirection: BigNumberish;
  optionType: BigNumberish;
  amount: BigNumberish;
  expiry: BigNumberish;
  strikePrice: BigNumberish;
  liquidity: LiquidityStruct;
  exchangeParams: ExchangeParamsStruct;
};

export type TradeParametersStructOutput = [
  boolean,
  boolean,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  LiquidityStructOutput,
  ExchangeParamsStructOutput
] & {
  isBuy: boolean;
  isForceClose: boolean;
  tradeDirection: number;
  optionType: number;
  amount: BigNumber;
  expiry: BigNumber;
  strikePrice: BigNumber;
  liquidity: LiquidityStructOutput;
  exchangeParams: ExchangeParamsStructOutput;
};

export type StrikeStruct = {
  id: BigNumberish;
  strikePrice: BigNumberish;
  skew: BigNumberish;
  longCall: BigNumberish;
  shortCallBase: BigNumberish;
  shortCallQuote: BigNumberish;
  longPut: BigNumberish;
  shortPut: BigNumberish;
  boardId: BigNumberish;
};

export type StrikeStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  id: BigNumber;
  strikePrice: BigNumber;
  skew: BigNumber;
  longCall: BigNumber;
  shortCallBase: BigNumber;
  shortCallQuote: BigNumber;
  longPut: BigNumber;
  shortPut: BigNumber;
  boardId: BigNumber;
};

export interface IOptionGreekCacheInterface extends utils.Interface {
  functions: {
    "getBoardGreeksView(uint256)": FunctionFragment;
    "getForceCloseParams()": FunctionFragment;
    "getGlobalCache()": FunctionFragment;
    "getGlobalNetDelta()": FunctionFragment;
    "getGlobalOptionValue()": FunctionFragment;
    "getGreekCacheParams()": FunctionFragment;
    "getIvGWAV(uint256,uint256)": FunctionFragment;
    "getMinCollatParams()": FunctionFragment;
    "getMinCollateral(uint8,uint256,uint256,uint256,uint256)": FunctionFragment;
    "getOptionBoardCache(uint256)": FunctionFragment;
    "getPriceForForceClose((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bool)": FunctionFragment;
    "getShockVol(uint256)": FunctionFragment;
    "getSkewGWAV(uint256,uint256)": FunctionFragment;
    "getStrikeCache(uint256)": FunctionFragment;
    "isBoardCacheStale(uint256)": FunctionFragment;
    "isGlobalCacheStale(uint256)": FunctionFragment;
    "updateBoardCachedGreeks(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getBoardGreeksView",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getForceCloseParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalCache",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalNetDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalOptionValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGreekCacheParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIvGWAV",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinCollatParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinCollateral",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionBoardCache",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceForForceClose",
    values: [
      TradeParametersStruct,
      StrikeStruct,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getShockVol",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSkewGWAV",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrikeCache",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBoardCacheStale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isGlobalCacheStale",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBoardCachedGreeks",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBoardGreeksView",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getForceCloseParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalNetDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalOptionValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGreekCacheParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIvGWAV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinCollatParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionBoardCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceForForceClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShockVol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSkewGWAV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrikeCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBoardCacheStale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGlobalCacheStale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBoardCachedGreeks",
    data: BytesLike
  ): Result;

  events: {
    "BoardCacheRemoved(uint256)": EventFragment;
    "BoardCacheUpdated(tuple)": EventFragment;
    "BoardIvUpdated(uint256,uint256,uint256)": EventFragment;
    "ForceCloseParametersSet(tuple)": EventFragment;
    "GlobalCacheUpdated(tuple)": EventFragment;
    "GreekCacheParametersSet(tuple)": EventFragment;
    "MinCollateralParametersSet(tuple)": EventFragment;
    "StrikeCacheRemoved(uint256)": EventFragment;
    "StrikeCacheUpdated(tuple)": EventFragment;
    "StrikeSkewUpdated(uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoardCacheRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoardCacheUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoardIvUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForceCloseParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GlobalCacheUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GreekCacheParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinCollateralParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrikeCacheRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrikeCacheUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrikeSkewUpdated"): EventFragment;
}

export type BoardCacheRemovedEvent = TypedEvent<
  [BigNumber],
  { boardId: BigNumber }
>;

export type BoardCacheRemovedEventFilter =
  TypedEventFilter<BoardCacheRemovedEvent>;

export type BoardCacheUpdatedEvent = TypedEvent<
  [OptionBoardCacheStructOutput],
  { boardCache: OptionBoardCacheStructOutput }
>;

export type BoardCacheUpdatedEventFilter =
  TypedEventFilter<BoardCacheUpdatedEvent>;

export type BoardIvUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { boardId: BigNumber; newIv: BigNumber; globalMaxIvVariance: BigNumber }
>;

export type BoardIvUpdatedEventFilter = TypedEventFilter<BoardIvUpdatedEvent>;

export type ForceCloseParametersSetEvent = TypedEvent<
  [ForceCloseParametersStructOutput],
  { params: ForceCloseParametersStructOutput }
>;

export type ForceCloseParametersSetEventFilter =
  TypedEventFilter<ForceCloseParametersSetEvent>;

export type GlobalCacheUpdatedEvent = TypedEvent<
  [GlobalCacheStructOutput],
  { globalCache: GlobalCacheStructOutput }
>;

export type GlobalCacheUpdatedEventFilter =
  TypedEventFilter<GlobalCacheUpdatedEvent>;

export type GreekCacheParametersSetEvent = TypedEvent<
  [GreekCacheParametersStructOutput],
  { params: GreekCacheParametersStructOutput }
>;

export type GreekCacheParametersSetEventFilter =
  TypedEventFilter<GreekCacheParametersSetEvent>;

export type MinCollateralParametersSetEvent = TypedEvent<
  [MinCollateralParametersStructOutput],
  { params: MinCollateralParametersStructOutput }
>;

export type MinCollateralParametersSetEventFilter =
  TypedEventFilter<MinCollateralParametersSetEvent>;

export type StrikeCacheRemovedEvent = TypedEvent<
  [BigNumber],
  { strikeId: BigNumber }
>;

export type StrikeCacheRemovedEventFilter =
  TypedEventFilter<StrikeCacheRemovedEvent>;

export type StrikeCacheUpdatedEvent = TypedEvent<
  [StrikeCacheStructOutput],
  { strikeCache: StrikeCacheStructOutput }
>;

export type StrikeCacheUpdatedEventFilter =
  TypedEventFilter<StrikeCacheUpdatedEvent>;

export type StrikeSkewUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { strikeId: BigNumber; newSkew: BigNumber; globalMaxSkewVariance: BigNumber }
>;

export type StrikeSkewUpdatedEventFilter =
  TypedEventFilter<StrikeSkewUpdatedEvent>;

export interface IOptionGreekCache extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOptionGreekCacheInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBoardGreeksView(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BoardGreeksViewStructOutput]>;

    "getBoardGreeksView(uint256)"(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BoardGreeksViewStructOutput]>;

    getForceCloseParams(
      overrides?: CallOverrides
    ): Promise<[ForceCloseParametersStructOutput]>;

    "getForceCloseParams()"(
      overrides?: CallOverrides
    ): Promise<[ForceCloseParametersStructOutput]>;

    getGlobalCache(
      overrides?: CallOverrides
    ): Promise<[GlobalCacheStructOutput]>;

    "getGlobalCache()"(
      overrides?: CallOverrides
    ): Promise<[GlobalCacheStructOutput]>;

    getGlobalNetDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getGlobalNetDelta()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGlobalOptionValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getGlobalOptionValue()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGreekCacheParams(
      overrides?: CallOverrides
    ): Promise<[GreekCacheParametersStructOutput]>;

    "getGreekCacheParams()"(
      overrides?: CallOverrides
    ): Promise<[GreekCacheParametersStructOutput]>;

    getIvGWAV(
      boardId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ivGWAV: BigNumber }>;

    "getIvGWAV(uint256,uint256)"(
      boardId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ivGWAV: BigNumber }>;

    getMinCollatParams(
      overrides?: CallOverrides
    ): Promise<[MinCollateralParametersStructOutput]>;

    "getMinCollatParams()"(
      overrides?: CallOverrides
    ): Promise<[MinCollateralParametersStructOutput]>;

    getMinCollateral(
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      spotPrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minCollateral: BigNumber }>;

    "getMinCollateral(uint8,uint256,uint256,uint256,uint256)"(
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      spotPrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minCollateral: BigNumber }>;

    getOptionBoardCache(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OptionBoardCacheStructOutput]>;

    "getOptionBoardCache(uint256)"(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[OptionBoardCacheStructOutput]>;

    getPriceForForceClose(
      trade: TradeParametersStruct,
      strike: StrikeStruct,
      expiry: BigNumberish,
      newVol: BigNumberish,
      isPostCutoff: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        optionPrice: BigNumber;
        forceCloseVol: BigNumber;
      }
    >;

    "getPriceForForceClose((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bool)"(
      trade: TradeParametersStruct,
      strike: StrikeStruct,
      expiry: BigNumberish,
      newVol: BigNumberish,
      isPostCutoff: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        optionPrice: BigNumber;
        forceCloseVol: BigNumber;
      }
    >;

    getShockVol(
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getShockVol(uint256)"(
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSkewGWAV(
      strikeId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { skewGWAV: BigNumber }>;

    "getSkewGWAV(uint256,uint256)"(
      strikeId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { skewGWAV: BigNumber }>;

    getStrikeCache(
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[StrikeCacheStructOutput]>;

    "getStrikeCache(uint256)"(
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[StrikeCacheStructOutput]>;

    isBoardCacheStale(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isBoardCacheStale(uint256)"(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isGlobalCacheStale(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isGlobalCacheStale(uint256)"(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateBoardCachedGreeks(
      boardId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateBoardCachedGreeks(uint256)"(
      boardId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getBoardGreeksView(
    boardId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BoardGreeksViewStructOutput>;

  "getBoardGreeksView(uint256)"(
    boardId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BoardGreeksViewStructOutput>;

  getForceCloseParams(
    overrides?: CallOverrides
  ): Promise<ForceCloseParametersStructOutput>;

  "getForceCloseParams()"(
    overrides?: CallOverrides
  ): Promise<ForceCloseParametersStructOutput>;

  getGlobalCache(overrides?: CallOverrides): Promise<GlobalCacheStructOutput>;

  "getGlobalCache()"(
    overrides?: CallOverrides
  ): Promise<GlobalCacheStructOutput>;

  getGlobalNetDelta(overrides?: CallOverrides): Promise<BigNumber>;

  "getGlobalNetDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

  getGlobalOptionValue(overrides?: CallOverrides): Promise<BigNumber>;

  "getGlobalOptionValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  getGreekCacheParams(
    overrides?: CallOverrides
  ): Promise<GreekCacheParametersStructOutput>;

  "getGreekCacheParams()"(
    overrides?: CallOverrides
  ): Promise<GreekCacheParametersStructOutput>;

  getIvGWAV(
    boardId: BigNumberish,
    secondsAgo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getIvGWAV(uint256,uint256)"(
    boardId: BigNumberish,
    secondsAgo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinCollatParams(
    overrides?: CallOverrides
  ): Promise<MinCollateralParametersStructOutput>;

  "getMinCollatParams()"(
    overrides?: CallOverrides
  ): Promise<MinCollateralParametersStructOutput>;

  getMinCollateral(
    optionType: BigNumberish,
    strikePrice: BigNumberish,
    expiry: BigNumberish,
    spotPrice: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getMinCollateral(uint8,uint256,uint256,uint256,uint256)"(
    optionType: BigNumberish,
    strikePrice: BigNumberish,
    expiry: BigNumberish,
    spotPrice: BigNumberish,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOptionBoardCache(
    boardId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OptionBoardCacheStructOutput>;

  "getOptionBoardCache(uint256)"(
    boardId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<OptionBoardCacheStructOutput>;

  getPriceForForceClose(
    trade: TradeParametersStruct,
    strike: StrikeStruct,
    expiry: BigNumberish,
    newVol: BigNumberish,
    isPostCutoff: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      optionPrice: BigNumber;
      forceCloseVol: BigNumber;
    }
  >;

  "getPriceForForceClose((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bool)"(
    trade: TradeParametersStruct,
    strike: StrikeStruct,
    expiry: BigNumberish,
    newVol: BigNumberish,
    isPostCutoff: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      optionPrice: BigNumber;
      forceCloseVol: BigNumber;
    }
  >;

  getShockVol(
    timeToMaturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getShockVol(uint256)"(
    timeToMaturity: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSkewGWAV(
    strikeId: BigNumberish,
    secondsAgo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getSkewGWAV(uint256,uint256)"(
    strikeId: BigNumberish,
    secondsAgo: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStrikeCache(
    strikeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<StrikeCacheStructOutput>;

  "getStrikeCache(uint256)"(
    strikeId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<StrikeCacheStructOutput>;

  isBoardCacheStale(
    boardId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isBoardCacheStale(uint256)"(
    boardId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGlobalCacheStale(
    spotPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isGlobalCacheStale(uint256)"(
    spotPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateBoardCachedGreeks(
    boardId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateBoardCachedGreeks(uint256)"(
    boardId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBoardGreeksView(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BoardGreeksViewStructOutput>;

    "getBoardGreeksView(uint256)"(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BoardGreeksViewStructOutput>;

    getForceCloseParams(
      overrides?: CallOverrides
    ): Promise<ForceCloseParametersStructOutput>;

    "getForceCloseParams()"(
      overrides?: CallOverrides
    ): Promise<ForceCloseParametersStructOutput>;

    getGlobalCache(overrides?: CallOverrides): Promise<GlobalCacheStructOutput>;

    "getGlobalCache()"(
      overrides?: CallOverrides
    ): Promise<GlobalCacheStructOutput>;

    getGlobalNetDelta(overrides?: CallOverrides): Promise<BigNumber>;

    "getGlobalNetDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalOptionValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getGlobalOptionValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGreekCacheParams(
      overrides?: CallOverrides
    ): Promise<GreekCacheParametersStructOutput>;

    "getGreekCacheParams()"(
      overrides?: CallOverrides
    ): Promise<GreekCacheParametersStructOutput>;

    getIvGWAV(
      boardId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIvGWAV(uint256,uint256)"(
      boardId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinCollatParams(
      overrides?: CallOverrides
    ): Promise<MinCollateralParametersStructOutput>;

    "getMinCollatParams()"(
      overrides?: CallOverrides
    ): Promise<MinCollateralParametersStructOutput>;

    getMinCollateral(
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      spotPrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinCollateral(uint8,uint256,uint256,uint256,uint256)"(
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      spotPrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOptionBoardCache(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OptionBoardCacheStructOutput>;

    "getOptionBoardCache(uint256)"(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<OptionBoardCacheStructOutput>;

    getPriceForForceClose(
      trade: TradeParametersStruct,
      strike: StrikeStruct,
      expiry: BigNumberish,
      newVol: BigNumberish,
      isPostCutoff: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        optionPrice: BigNumber;
        forceCloseVol: BigNumber;
      }
    >;

    "getPriceForForceClose((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bool)"(
      trade: TradeParametersStruct,
      strike: StrikeStruct,
      expiry: BigNumberish,
      newVol: BigNumberish,
      isPostCutoff: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        optionPrice: BigNumber;
        forceCloseVol: BigNumber;
      }
    >;

    getShockVol(
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getShockVol(uint256)"(
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSkewGWAV(
      strikeId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSkewGWAV(uint256,uint256)"(
      strikeId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStrikeCache(
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StrikeCacheStructOutput>;

    "getStrikeCache(uint256)"(
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<StrikeCacheStructOutput>;

    isBoardCacheStale(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isBoardCacheStale(uint256)"(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGlobalCacheStale(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isGlobalCacheStale(uint256)"(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateBoardCachedGreeks(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBoardCachedGreeks(uint256)"(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BoardCacheRemoved(uint256)"(boardId?: null): BoardCacheRemovedEventFilter;
    BoardCacheRemoved(boardId?: null): BoardCacheRemovedEventFilter;

    "BoardCacheUpdated(tuple)"(boardCache?: null): BoardCacheUpdatedEventFilter;
    BoardCacheUpdated(boardCache?: null): BoardCacheUpdatedEventFilter;

    "BoardIvUpdated(uint256,uint256,uint256)"(
      boardId?: null,
      newIv?: null,
      globalMaxIvVariance?: null
    ): BoardIvUpdatedEventFilter;
    BoardIvUpdated(
      boardId?: null,
      newIv?: null,
      globalMaxIvVariance?: null
    ): BoardIvUpdatedEventFilter;

    "ForceCloseParametersSet(tuple)"(
      params?: null
    ): ForceCloseParametersSetEventFilter;
    ForceCloseParametersSet(params?: null): ForceCloseParametersSetEventFilter;

    "GlobalCacheUpdated(tuple)"(
      globalCache?: null
    ): GlobalCacheUpdatedEventFilter;
    GlobalCacheUpdated(globalCache?: null): GlobalCacheUpdatedEventFilter;

    "GreekCacheParametersSet(tuple)"(
      params?: null
    ): GreekCacheParametersSetEventFilter;
    GreekCacheParametersSet(params?: null): GreekCacheParametersSetEventFilter;

    "MinCollateralParametersSet(tuple)"(
      params?: null
    ): MinCollateralParametersSetEventFilter;
    MinCollateralParametersSet(
      params?: null
    ): MinCollateralParametersSetEventFilter;

    "StrikeCacheRemoved(uint256)"(
      strikeId?: null
    ): StrikeCacheRemovedEventFilter;
    StrikeCacheRemoved(strikeId?: null): StrikeCacheRemovedEventFilter;

    "StrikeCacheUpdated(tuple)"(
      strikeCache?: null
    ): StrikeCacheUpdatedEventFilter;
    StrikeCacheUpdated(strikeCache?: null): StrikeCacheUpdatedEventFilter;

    "StrikeSkewUpdated(uint256,uint256,uint256)"(
      strikeId?: null,
      newSkew?: null,
      globalMaxSkewVariance?: null
    ): StrikeSkewUpdatedEventFilter;
    StrikeSkewUpdated(
      strikeId?: null,
      newSkew?: null,
      globalMaxSkewVariance?: null
    ): StrikeSkewUpdatedEventFilter;
  };

  estimateGas: {
    getBoardGreeksView(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBoardGreeksView(uint256)"(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getForceCloseParams(overrides?: CallOverrides): Promise<BigNumber>;

    "getForceCloseParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalCache(overrides?: CallOverrides): Promise<BigNumber>;

    "getGlobalCache()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalNetDelta(overrides?: CallOverrides): Promise<BigNumber>;

    "getGlobalNetDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGlobalOptionValue(overrides?: CallOverrides): Promise<BigNumber>;

    "getGlobalOptionValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGreekCacheParams(overrides?: CallOverrides): Promise<BigNumber>;

    "getGreekCacheParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    getIvGWAV(
      boardId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIvGWAV(uint256,uint256)"(
      boardId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinCollatParams(overrides?: CallOverrides): Promise<BigNumber>;

    "getMinCollatParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMinCollateral(
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      spotPrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinCollateral(uint8,uint256,uint256,uint256,uint256)"(
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      spotPrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOptionBoardCache(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getOptionBoardCache(uint256)"(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceForForceClose(
      trade: TradeParametersStruct,
      strike: StrikeStruct,
      expiry: BigNumberish,
      newVol: BigNumberish,
      isPostCutoff: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceForForceClose((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bool)"(
      trade: TradeParametersStruct,
      strike: StrikeStruct,
      expiry: BigNumberish,
      newVol: BigNumberish,
      isPostCutoff: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShockVol(
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getShockVol(uint256)"(
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSkewGWAV(
      strikeId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSkewGWAV(uint256,uint256)"(
      strikeId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStrikeCache(
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getStrikeCache(uint256)"(
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBoardCacheStale(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBoardCacheStale(uint256)"(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGlobalCacheStale(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isGlobalCacheStale(uint256)"(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateBoardCachedGreeks(
      boardId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateBoardCachedGreeks(uint256)"(
      boardId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBoardGreeksView(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBoardGreeksView(uint256)"(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getForceCloseParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getForceCloseParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalCache(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGlobalCache()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalNetDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGlobalNetDelta()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalOptionValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGlobalOptionValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGreekCacheParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGreekCacheParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIvGWAV(
      boardId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIvGWAV(uint256,uint256)"(
      boardId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinCollatParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinCollatParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinCollateral(
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      spotPrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinCollateral(uint8,uint256,uint256,uint256,uint256)"(
      optionType: BigNumberish,
      strikePrice: BigNumberish,
      expiry: BigNumberish,
      spotPrice: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOptionBoardCache(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getOptionBoardCache(uint256)"(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceForForceClose(
      trade: TradeParametersStruct,
      strike: StrikeStruct,
      expiry: BigNumberish,
      newVol: BigNumberish,
      isPostCutoff: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceForForceClose((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,bool)"(
      trade: TradeParametersStruct,
      strike: StrikeStruct,
      expiry: BigNumberish,
      newVol: BigNumberish,
      isPostCutoff: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShockVol(
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getShockVol(uint256)"(
      timeToMaturity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSkewGWAV(
      strikeId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSkewGWAV(uint256,uint256)"(
      strikeId: BigNumberish,
      secondsAgo: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStrikeCache(
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStrikeCache(uint256)"(
      strikeId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBoardCacheStale(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBoardCacheStale(uint256)"(
      boardId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGlobalCacheStale(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isGlobalCacheStale(uint256)"(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateBoardCachedGreeks(
      boardId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateBoardCachedGreeks(uint256)"(
      boardId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
