/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PoolHedgerParametersStruct = {
  interactionDelay: BigNumberish;
  hedgeCap: BigNumberish;
};

export type PoolHedgerParametersStructOutput = [BigNumber, BigNumber] & {
  interactionDelay: BigNumber;
  hedgeCap: BigNumber;
};

export interface PoolHedgerInterface extends utils.Interface {
  functions: {
    "getCappedExpectedHedge()": FunctionFragment;
    "getCurrentHedgedNetDelta()": FunctionFragment;
    "getHedgingLiquidity(uint256)": FunctionFragment;
    "getPoolHedgerParams()": FunctionFragment;
    "hedgeDelta()": FunctionFragment;
    "lastInteraction()": FunctionFragment;
    "resetInteractionDelay()": FunctionFragment;
    "updateCollateral()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getCappedExpectedHedge",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentHedgedNetDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHedgingLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolHedgerParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hedgeDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastInteraction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetInteractionDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateral",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getCappedExpectedHedge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentHedgedNetDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getHedgingLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolHedgerParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hedgeDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastInteraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetInteractionDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateral",
    data: BytesLike
  ): Result;

  events: {
    "PoolHedgerParametersSet(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolHedgerParametersSet"): EventFragment;
}

export type PoolHedgerParametersSetEvent = TypedEvent<
  [PoolHedgerParametersStructOutput],
  { poolHedgerParams: PoolHedgerParametersStructOutput }
>;

export type PoolHedgerParametersSetEventFilter =
  TypedEventFilter<PoolHedgerParametersSetEvent>;

export interface PoolHedger extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolHedgerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCappedExpectedHedge(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cappedExpectedHedge: BigNumber }>;

    "getCappedExpectedHedge()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cappedExpectedHedge: BigNumber }>;

    getCurrentHedgedNetDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getCurrentHedgedNetDelta()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getHedgingLiquidity(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingDeltaLiquidity: BigNumber;
        usedDeltaLiquidity: BigNumber;
      }
    >;

    "getHedgingLiquidity(uint256)"(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingDeltaLiquidity: BigNumber;
        usedDeltaLiquidity: BigNumber;
      }
    >;

    getPoolHedgerParams(
      overrides?: CallOverrides
    ): Promise<[PoolHedgerParametersStructOutput]>;

    "getPoolHedgerParams()"(
      overrides?: CallOverrides
    ): Promise<[PoolHedgerParametersStructOutput]>;

    hedgeDelta(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "hedgeDelta()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastInteraction(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastInteraction()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    resetInteractionDelay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "resetInteractionDelay()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCollateral(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateCollateral()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getCappedExpectedHedge(overrides?: CallOverrides): Promise<BigNumber>;

  "getCappedExpectedHedge()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentHedgedNetDelta(overrides?: CallOverrides): Promise<BigNumber>;

  "getCurrentHedgedNetDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

  getHedgingLiquidity(
    spotPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      pendingDeltaLiquidity: BigNumber;
      usedDeltaLiquidity: BigNumber;
    }
  >;

  "getHedgingLiquidity(uint256)"(
    spotPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      pendingDeltaLiquidity: BigNumber;
      usedDeltaLiquidity: BigNumber;
    }
  >;

  getPoolHedgerParams(
    overrides?: CallOverrides
  ): Promise<PoolHedgerParametersStructOutput>;

  "getPoolHedgerParams()"(
    overrides?: CallOverrides
  ): Promise<PoolHedgerParametersStructOutput>;

  hedgeDelta(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "hedgeDelta()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastInteraction(overrides?: CallOverrides): Promise<BigNumber>;

  "lastInteraction()"(overrides?: CallOverrides): Promise<BigNumber>;

  resetInteractionDelay(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "resetInteractionDelay()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCollateral(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateCollateral()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getCappedExpectedHedge(overrides?: CallOverrides): Promise<BigNumber>;

    "getCappedExpectedHedge()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentHedgedNetDelta(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentHedgedNetDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHedgingLiquidity(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingDeltaLiquidity: BigNumber;
        usedDeltaLiquidity: BigNumber;
      }
    >;

    "getHedgingLiquidity(uint256)"(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        pendingDeltaLiquidity: BigNumber;
        usedDeltaLiquidity: BigNumber;
      }
    >;

    getPoolHedgerParams(
      overrides?: CallOverrides
    ): Promise<PoolHedgerParametersStructOutput>;

    "getPoolHedgerParams()"(
      overrides?: CallOverrides
    ): Promise<PoolHedgerParametersStructOutput>;

    hedgeDelta(overrides?: CallOverrides): Promise<void>;

    "hedgeDelta()"(overrides?: CallOverrides): Promise<void>;

    lastInteraction(overrides?: CallOverrides): Promise<BigNumber>;

    "lastInteraction()"(overrides?: CallOverrides): Promise<BigNumber>;

    resetInteractionDelay(overrides?: CallOverrides): Promise<void>;

    "resetInteractionDelay()"(overrides?: CallOverrides): Promise<void>;

    updateCollateral(overrides?: CallOverrides): Promise<void>;

    "updateCollateral()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "PoolHedgerParametersSet(tuple)"(
      poolHedgerParams?: null
    ): PoolHedgerParametersSetEventFilter;
    PoolHedgerParametersSet(
      poolHedgerParams?: null
    ): PoolHedgerParametersSetEventFilter;
  };

  estimateGas: {
    getCappedExpectedHedge(overrides?: CallOverrides): Promise<BigNumber>;

    "getCappedExpectedHedge()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentHedgedNetDelta(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentHedgedNetDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

    getHedgingLiquidity(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getHedgingLiquidity(uint256)"(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolHedgerParams(overrides?: CallOverrides): Promise<BigNumber>;

    "getPoolHedgerParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    hedgeDelta(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "hedgeDelta()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastInteraction(overrides?: CallOverrides): Promise<BigNumber>;

    "lastInteraction()"(overrides?: CallOverrides): Promise<BigNumber>;

    resetInteractionDelay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "resetInteractionDelay()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCollateral(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateCollateral()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getCappedExpectedHedge(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCappedExpectedHedge()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentHedgedNetDelta(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentHedgedNetDelta()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getHedgingLiquidity(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getHedgingLiquidity(uint256)"(
      spotPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolHedgerParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPoolHedgerParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hedgeDelta(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "hedgeDelta()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastInteraction(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastInteraction()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resetInteractionDelay(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "resetInteractionDelay()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCollateral(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateCollateral()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
