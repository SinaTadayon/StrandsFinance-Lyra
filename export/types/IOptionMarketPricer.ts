/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PricingParametersStruct = {
  optionPriceFeeCoefficient: BigNumberish;
  optionPriceFee1xPoint: BigNumberish;
  optionPriceFee2xPoint: BigNumberish;
  spotPriceFeeCoefficient: BigNumberish;
  spotPriceFee1xPoint: BigNumberish;
  spotPriceFee2xPoint: BigNumberish;
  vegaFeeCoefficient: BigNumberish;
  standardSize: BigNumberish;
  skewAdjustmentFactor: BigNumberish;
};

export type PricingParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  optionPriceFeeCoefficient: BigNumber;
  optionPriceFee1xPoint: BigNumber;
  optionPriceFee2xPoint: BigNumber;
  spotPriceFeeCoefficient: BigNumber;
  spotPriceFee1xPoint: BigNumber;
  spotPriceFee2xPoint: BigNumber;
  vegaFeeCoefficient: BigNumber;
  standardSize: BigNumber;
  skewAdjustmentFactor: BigNumber;
};

export type TradeLimitParametersStruct = {
  minDelta: BigNumberish;
  minForceCloseDelta: BigNumberish;
  tradingCutoff: BigNumberish;
  minBaseIV: BigNumberish;
  maxBaseIV: BigNumberish;
  minSkew: BigNumberish;
  maxSkew: BigNumberish;
  minVol: BigNumberish;
  maxVol: BigNumberish;
  absMinSkew: BigNumberish;
  absMaxSkew: BigNumberish;
  capSkewsToAbs: boolean;
};

export type TradeLimitParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean
] & {
  minDelta: BigNumber;
  minForceCloseDelta: BigNumber;
  tradingCutoff: BigNumber;
  minBaseIV: BigNumber;
  maxBaseIV: BigNumber;
  minSkew: BigNumber;
  maxSkew: BigNumber;
  minVol: BigNumber;
  maxVol: BigNumber;
  absMinSkew: BigNumber;
  absMaxSkew: BigNumber;
  capSkewsToAbs: boolean;
};

export type VarianceFeeParametersStruct = {
  defaultVarianceFeeCoefficient: BigNumberish;
  forceCloseVarianceFeeCoefficient: BigNumberish;
  skewAdjustmentCoefficient: BigNumberish;
  referenceSkew: BigNumberish;
  minimumStaticSkewAdjustment: BigNumberish;
  vegaCoefficient: BigNumberish;
  minimumStaticVega: BigNumberish;
  ivVarianceCoefficient: BigNumberish;
  minimumStaticIvVariance: BigNumberish;
};

export type VarianceFeeParametersStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  defaultVarianceFeeCoefficient: BigNumber;
  forceCloseVarianceFeeCoefficient: BigNumber;
  skewAdjustmentCoefficient: BigNumber;
  referenceSkew: BigNumber;
  minimumStaticSkewAdjustment: BigNumber;
  vegaCoefficient: BigNumber;
  minimumStaticVega: BigNumber;
  ivVarianceCoefficient: BigNumber;
  minimumStaticIvVariance: BigNumber;
};

export type LiquidityStruct = {
  freeLiquidity: BigNumberish;
  burnableLiquidity: BigNumberish;
  usedCollatLiquidity: BigNumberish;
  pendingDeltaLiquidity: BigNumberish;
  usedDeltaLiquidity: BigNumberish;
  NAV: BigNumberish;
};

export type LiquidityStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  freeLiquidity: BigNumber;
  burnableLiquidity: BigNumber;
  usedCollatLiquidity: BigNumber;
  pendingDeltaLiquidity: BigNumber;
  usedDeltaLiquidity: BigNumber;
  NAV: BigNumber;
};

export type ExchangeParamsStruct = {
  spotPrice: BigNumberish;
  quoteKey: BytesLike;
  baseKey: BytesLike;
  quoteBaseFeeRate: BigNumberish;
  baseQuoteFeeRate: BigNumberish;
};

export type ExchangeParamsStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber,
  BigNumber
] & {
  spotPrice: BigNumber;
  quoteKey: string;
  baseKey: string;
  quoteBaseFeeRate: BigNumber;
  baseQuoteFeeRate: BigNumber;
};

export type TradeParametersStruct = {
  isBuy: boolean;
  isForceClose: boolean;
  tradeDirection: BigNumberish;
  optionType: BigNumberish;
  amount: BigNumberish;
  expiry: BigNumberish;
  strikePrice: BigNumberish;
  liquidity: LiquidityStruct;
  exchangeParams: ExchangeParamsStruct;
};

export type TradeParametersStructOutput = [
  boolean,
  boolean,
  number,
  number,
  BigNumber,
  BigNumber,
  BigNumber,
  LiquidityStructOutput,
  ExchangeParamsStructOutput
] & {
  isBuy: boolean;
  isForceClose: boolean;
  tradeDirection: number;
  optionType: number;
  amount: BigNumber;
  expiry: BigNumber;
  strikePrice: BigNumber;
  liquidity: LiquidityStructOutput;
  exchangeParams: ExchangeParamsStructOutput;
};

export type TradePricingStruct = {
  optionPrice: BigNumberish;
  preTradeAmmNetStdVega: BigNumberish;
  postTradeAmmNetStdVega: BigNumberish;
  callDelta: BigNumberish;
  volTraded: BigNumberish;
  ivVariance: BigNumberish;
  vega: BigNumberish;
};

export type TradePricingStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  optionPrice: BigNumber;
  preTradeAmmNetStdVega: BigNumber;
  postTradeAmmNetStdVega: BigNumber;
  callDelta: BigNumber;
  volTraded: BigNumber;
  ivVariance: BigNumber;
  vega: BigNumber;
};

export type VegaUtilFeeComponentsStruct = {
  preTradeAmmNetStdVega: BigNumberish;
  postTradeAmmNetStdVega: BigNumberish;
  vegaUtil: BigNumberish;
  volTraded: BigNumberish;
  NAV: BigNumberish;
  vegaUtilFee: BigNumberish;
};

export type VegaUtilFeeComponentsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  preTradeAmmNetStdVega: BigNumber;
  postTradeAmmNetStdVega: BigNumber;
  vegaUtil: BigNumber;
  volTraded: BigNumber;
  NAV: BigNumber;
  vegaUtilFee: BigNumber;
};

export type VarianceFeeComponentsStruct = {
  varianceFeeCoefficient: BigNumberish;
  vega: BigNumberish;
  vegaCoefficient: BigNumberish;
  skew: BigNumberish;
  skewCoefficient: BigNumberish;
  ivVariance: BigNumberish;
  ivVarianceCoefficient: BigNumberish;
  varianceFee: BigNumberish;
};

export type VarianceFeeComponentsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  varianceFeeCoefficient: BigNumber;
  vega: BigNumber;
  vegaCoefficient: BigNumber;
  skew: BigNumber;
  skewCoefficient: BigNumber;
  ivVariance: BigNumber;
  ivVarianceCoefficient: BigNumber;
  varianceFee: BigNumber;
};

export type TradeResultStruct = {
  amount: BigNumberish;
  premium: BigNumberish;
  optionPriceFee: BigNumberish;
  spotPriceFee: BigNumberish;
  vegaUtilFee: VegaUtilFeeComponentsStruct;
  varianceFee: VarianceFeeComponentsStruct;
  totalFee: BigNumberish;
  totalCost: BigNumberish;
  volTraded: BigNumberish;
  newBaseIv: BigNumberish;
  newSkew: BigNumberish;
};

export type TradeResultStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  VegaUtilFeeComponentsStructOutput,
  VarianceFeeComponentsStructOutput,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  amount: BigNumber;
  premium: BigNumber;
  optionPriceFee: BigNumber;
  spotPriceFee: BigNumber;
  vegaUtilFee: VegaUtilFeeComponentsStructOutput;
  varianceFee: VarianceFeeComponentsStructOutput;
  totalFee: BigNumber;
  totalCost: BigNumber;
  volTraded: BigNumber;
  newBaseIv: BigNumber;
  newSkew: BigNumber;
};

export interface IOptionMarketPricerInterface extends utils.Interface {
  functions: {
    "getPricingParams()": FunctionFragment;
    "getTimeWeightedFee(uint256,uint256,uint256,uint256)": FunctionFragment;
    "getTradeLimitParams()": FunctionFragment;
    "getTradeResult((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256,uint256)": FunctionFragment;
    "getVarianceFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256)": FunctionFragment;
    "getVarianceFeeParams()": FunctionFragment;
    "getVegaUtilFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256))": FunctionFragment;
    "ivImpactForTrade((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),uint256,uint256)": FunctionFragment;
    "pricingParams()": FunctionFragment;
    "tradeLimitParams()": FunctionFragment;
    "varianceFeeParams()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getPricingParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeWeightedFee",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeLimitParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeResult",
    values: [
      TradeParametersStruct,
      TradePricingStruct,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getVarianceFee",
    values: [TradeParametersStruct, TradePricingStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVarianceFeeParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVegaUtilFee",
    values: [TradeParametersStruct, TradePricingStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "ivImpactForTrade",
    values: [TradeParametersStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pricingParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradeLimitParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "varianceFeeParams",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getPricingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeWeightedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeLimitParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVarianceFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVarianceFeeParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVegaUtilFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ivImpactForTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricingParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeLimitParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "varianceFeeParams",
    data: BytesLike
  ): Result;

  events: {
    "PricingParametersSet(tuple)": EventFragment;
    "TradeLimitParametersSet(tuple)": EventFragment;
    "VarianceFeeParametersSet(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PricingParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeLimitParametersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VarianceFeeParametersSet"): EventFragment;
}

export type PricingParametersSetEvent = TypedEvent<
  [PricingParametersStructOutput],
  { pricingParams: PricingParametersStructOutput }
>;

export type PricingParametersSetEventFilter =
  TypedEventFilter<PricingParametersSetEvent>;

export type TradeLimitParametersSetEvent = TypedEvent<
  [TradeLimitParametersStructOutput],
  { tradeLimitParams: TradeLimitParametersStructOutput }
>;

export type TradeLimitParametersSetEventFilter =
  TypedEventFilter<TradeLimitParametersSetEvent>;

export type VarianceFeeParametersSetEvent = TypedEvent<
  [VarianceFeeParametersStructOutput],
  { varianceFeeParams: VarianceFeeParametersStructOutput }
>;

export type VarianceFeeParametersSetEventFilter =
  TypedEventFilter<VarianceFeeParametersSetEvent>;

export interface IOptionMarketPricer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOptionMarketPricerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPricingParams(
      overrides?: CallOverrides
    ): Promise<
      [PricingParametersStructOutput] & {
        pricingParameters: PricingParametersStructOutput;
      }
    >;

    "getPricingParams()"(
      overrides?: CallOverrides
    ): Promise<
      [PricingParametersStructOutput] & {
        pricingParameters: PricingParametersStructOutput;
      }
    >;

    getTimeWeightedFee(
      expiry: BigNumberish,
      pointA: BigNumberish,
      pointB: BigNumberish,
      coefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timeWeightedFee: BigNumber }>;

    "getTimeWeightedFee(uint256,uint256,uint256,uint256)"(
      expiry: BigNumberish,
      pointA: BigNumberish,
      pointB: BigNumberish,
      coefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { timeWeightedFee: BigNumber }>;

    getTradeLimitParams(
      overrides?: CallOverrides
    ): Promise<
      [TradeLimitParametersStructOutput] & {
        tradeLimitParameters: TradeLimitParametersStructOutput;
      }
    >;

    "getTradeLimitParams()"(
      overrides?: CallOverrides
    ): Promise<
      [TradeLimitParametersStructOutput] & {
        tradeLimitParameters: TradeLimitParametersStructOutput;
      }
    >;

    getTradeResult(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      newBaseIv: BigNumberish,
      newSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [TradeResultStructOutput] & { tradeResult: TradeResultStructOutput }
    >;

    "getTradeResult((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256,uint256)"(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      newBaseIv: BigNumberish,
      newSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [TradeResultStructOutput] & { tradeResult: TradeResultStructOutput }
    >;

    getVarianceFee(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      skew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [VarianceFeeComponentsStructOutput] & {
        varianceFeeComponents: VarianceFeeComponentsStructOutput;
      }
    >;

    "getVarianceFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256)"(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      skew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [VarianceFeeComponentsStructOutput] & {
        varianceFeeComponents: VarianceFeeComponentsStructOutput;
      }
    >;

    getVarianceFeeParams(
      overrides?: CallOverrides
    ): Promise<
      [VarianceFeeParametersStructOutput] & {
        varianceFeeParameters: VarianceFeeParametersStructOutput;
      }
    >;

    "getVarianceFeeParams()"(
      overrides?: CallOverrides
    ): Promise<
      [VarianceFeeParametersStructOutput] & {
        varianceFeeParameters: VarianceFeeParametersStructOutput;
      }
    >;

    getVegaUtilFee(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      overrides?: CallOverrides
    ): Promise<
      [VegaUtilFeeComponentsStructOutput] & {
        vegaUtilFeeComponents: VegaUtilFeeComponentsStructOutput;
      }
    >;

    "getVegaUtilFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256))"(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      overrides?: CallOverrides
    ): Promise<
      [VegaUtilFeeComponentsStructOutput] & {
        vegaUtilFeeComponents: VegaUtilFeeComponentsStructOutput;
      }
    >;

    ivImpactForTrade(
      trade: TradeParametersStruct,
      boardBaseIv: BigNumberish,
      strikeSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { newBaseIv: BigNumber; newSkew: BigNumber }
    >;

    "ivImpactForTrade((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),uint256,uint256)"(
      trade: TradeParametersStruct,
      boardBaseIv: BigNumberish,
      strikeSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { newBaseIv: BigNumber; newSkew: BigNumber }
    >;

    pricingParams(
      overrides?: CallOverrides
    ): Promise<[PricingParametersStructOutput]>;

    "pricingParams()"(
      overrides?: CallOverrides
    ): Promise<[PricingParametersStructOutput]>;

    tradeLimitParams(
      overrides?: CallOverrides
    ): Promise<[TradeLimitParametersStructOutput]>;

    "tradeLimitParams()"(
      overrides?: CallOverrides
    ): Promise<[TradeLimitParametersStructOutput]>;

    varianceFeeParams(
      overrides?: CallOverrides
    ): Promise<[VarianceFeeParametersStructOutput]>;

    "varianceFeeParams()"(
      overrides?: CallOverrides
    ): Promise<[VarianceFeeParametersStructOutput]>;
  };

  getPricingParams(
    overrides?: CallOverrides
  ): Promise<PricingParametersStructOutput>;

  "getPricingParams()"(
    overrides?: CallOverrides
  ): Promise<PricingParametersStructOutput>;

  getTimeWeightedFee(
    expiry: BigNumberish,
    pointA: BigNumberish,
    pointB: BigNumberish,
    coefficient: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTimeWeightedFee(uint256,uint256,uint256,uint256)"(
    expiry: BigNumberish,
    pointA: BigNumberish,
    pointB: BigNumberish,
    coefficient: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTradeLimitParams(
    overrides?: CallOverrides
  ): Promise<TradeLimitParametersStructOutput>;

  "getTradeLimitParams()"(
    overrides?: CallOverrides
  ): Promise<TradeLimitParametersStructOutput>;

  getTradeResult(
    trade: TradeParametersStruct,
    pricing: TradePricingStruct,
    newBaseIv: BigNumberish,
    newSkew: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TradeResultStructOutput>;

  "getTradeResult((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256,uint256)"(
    trade: TradeParametersStruct,
    pricing: TradePricingStruct,
    newBaseIv: BigNumberish,
    newSkew: BigNumberish,
    overrides?: CallOverrides
  ): Promise<TradeResultStructOutput>;

  getVarianceFee(
    trade: TradeParametersStruct,
    pricing: TradePricingStruct,
    skew: BigNumberish,
    overrides?: CallOverrides
  ): Promise<VarianceFeeComponentsStructOutput>;

  "getVarianceFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256)"(
    trade: TradeParametersStruct,
    pricing: TradePricingStruct,
    skew: BigNumberish,
    overrides?: CallOverrides
  ): Promise<VarianceFeeComponentsStructOutput>;

  getVarianceFeeParams(
    overrides?: CallOverrides
  ): Promise<VarianceFeeParametersStructOutput>;

  "getVarianceFeeParams()"(
    overrides?: CallOverrides
  ): Promise<VarianceFeeParametersStructOutput>;

  getVegaUtilFee(
    trade: TradeParametersStruct,
    pricing: TradePricingStruct,
    overrides?: CallOverrides
  ): Promise<VegaUtilFeeComponentsStructOutput>;

  "getVegaUtilFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256))"(
    trade: TradeParametersStruct,
    pricing: TradePricingStruct,
    overrides?: CallOverrides
  ): Promise<VegaUtilFeeComponentsStructOutput>;

  ivImpactForTrade(
    trade: TradeParametersStruct,
    boardBaseIv: BigNumberish,
    strikeSkew: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { newBaseIv: BigNumber; newSkew: BigNumber }
  >;

  "ivImpactForTrade((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),uint256,uint256)"(
    trade: TradeParametersStruct,
    boardBaseIv: BigNumberish,
    strikeSkew: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { newBaseIv: BigNumber; newSkew: BigNumber }
  >;

  pricingParams(
    overrides?: CallOverrides
  ): Promise<PricingParametersStructOutput>;

  "pricingParams()"(
    overrides?: CallOverrides
  ): Promise<PricingParametersStructOutput>;

  tradeLimitParams(
    overrides?: CallOverrides
  ): Promise<TradeLimitParametersStructOutput>;

  "tradeLimitParams()"(
    overrides?: CallOverrides
  ): Promise<TradeLimitParametersStructOutput>;

  varianceFeeParams(
    overrides?: CallOverrides
  ): Promise<VarianceFeeParametersStructOutput>;

  "varianceFeeParams()"(
    overrides?: CallOverrides
  ): Promise<VarianceFeeParametersStructOutput>;

  callStatic: {
    getPricingParams(
      overrides?: CallOverrides
    ): Promise<PricingParametersStructOutput>;

    "getPricingParams()"(
      overrides?: CallOverrides
    ): Promise<PricingParametersStructOutput>;

    getTimeWeightedFee(
      expiry: BigNumberish,
      pointA: BigNumberish,
      pointB: BigNumberish,
      coefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimeWeightedFee(uint256,uint256,uint256,uint256)"(
      expiry: BigNumberish,
      pointA: BigNumberish,
      pointB: BigNumberish,
      coefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeLimitParams(
      overrides?: CallOverrides
    ): Promise<TradeLimitParametersStructOutput>;

    "getTradeLimitParams()"(
      overrides?: CallOverrides
    ): Promise<TradeLimitParametersStructOutput>;

    getTradeResult(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      newBaseIv: BigNumberish,
      newSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TradeResultStructOutput>;

    "getTradeResult((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256,uint256)"(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      newBaseIv: BigNumberish,
      newSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<TradeResultStructOutput>;

    getVarianceFee(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      skew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<VarianceFeeComponentsStructOutput>;

    "getVarianceFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256)"(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      skew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<VarianceFeeComponentsStructOutput>;

    getVarianceFeeParams(
      overrides?: CallOverrides
    ): Promise<VarianceFeeParametersStructOutput>;

    "getVarianceFeeParams()"(
      overrides?: CallOverrides
    ): Promise<VarianceFeeParametersStructOutput>;

    getVegaUtilFee(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      overrides?: CallOverrides
    ): Promise<VegaUtilFeeComponentsStructOutput>;

    "getVegaUtilFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256))"(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      overrides?: CallOverrides
    ): Promise<VegaUtilFeeComponentsStructOutput>;

    ivImpactForTrade(
      trade: TradeParametersStruct,
      boardBaseIv: BigNumberish,
      strikeSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { newBaseIv: BigNumber; newSkew: BigNumber }
    >;

    "ivImpactForTrade((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),uint256,uint256)"(
      trade: TradeParametersStruct,
      boardBaseIv: BigNumberish,
      strikeSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { newBaseIv: BigNumber; newSkew: BigNumber }
    >;

    pricingParams(
      overrides?: CallOverrides
    ): Promise<PricingParametersStructOutput>;

    "pricingParams()"(
      overrides?: CallOverrides
    ): Promise<PricingParametersStructOutput>;

    tradeLimitParams(
      overrides?: CallOverrides
    ): Promise<TradeLimitParametersStructOutput>;

    "tradeLimitParams()"(
      overrides?: CallOverrides
    ): Promise<TradeLimitParametersStructOutput>;

    varianceFeeParams(
      overrides?: CallOverrides
    ): Promise<VarianceFeeParametersStructOutput>;

    "varianceFeeParams()"(
      overrides?: CallOverrides
    ): Promise<VarianceFeeParametersStructOutput>;
  };

  filters: {
    "PricingParametersSet(tuple)"(
      pricingParams?: null
    ): PricingParametersSetEventFilter;
    PricingParametersSet(pricingParams?: null): PricingParametersSetEventFilter;

    "TradeLimitParametersSet(tuple)"(
      tradeLimitParams?: null
    ): TradeLimitParametersSetEventFilter;
    TradeLimitParametersSet(
      tradeLimitParams?: null
    ): TradeLimitParametersSetEventFilter;

    "VarianceFeeParametersSet(tuple)"(
      varianceFeeParams?: null
    ): VarianceFeeParametersSetEventFilter;
    VarianceFeeParametersSet(
      varianceFeeParams?: null
    ): VarianceFeeParametersSetEventFilter;
  };

  estimateGas: {
    getPricingParams(overrides?: CallOverrides): Promise<BigNumber>;

    "getPricingParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTimeWeightedFee(
      expiry: BigNumberish,
      pointA: BigNumberish,
      pointB: BigNumberish,
      coefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimeWeightedFee(uint256,uint256,uint256,uint256)"(
      expiry: BigNumberish,
      pointA: BigNumberish,
      pointB: BigNumberish,
      coefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradeLimitParams(overrides?: CallOverrides): Promise<BigNumber>;

    "getTradeLimitParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    getTradeResult(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      newBaseIv: BigNumberish,
      newSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTradeResult((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256,uint256)"(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      newBaseIv: BigNumberish,
      newSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVarianceFee(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      skew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVarianceFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256)"(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      skew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVarianceFeeParams(overrides?: CallOverrides): Promise<BigNumber>;

    "getVarianceFeeParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    getVegaUtilFee(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVegaUtilFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256))"(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ivImpactForTrade(
      trade: TradeParametersStruct,
      boardBaseIv: BigNumberish,
      strikeSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ivImpactForTrade((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),uint256,uint256)"(
      trade: TradeParametersStruct,
      boardBaseIv: BigNumberish,
      strikeSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricingParams(overrides?: CallOverrides): Promise<BigNumber>;

    "pricingParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    tradeLimitParams(overrides?: CallOverrides): Promise<BigNumber>;

    "tradeLimitParams()"(overrides?: CallOverrides): Promise<BigNumber>;

    varianceFeeParams(overrides?: CallOverrides): Promise<BigNumber>;

    "varianceFeeParams()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getPricingParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPricingParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeWeightedFee(
      expiry: BigNumberish,
      pointA: BigNumberish,
      pointB: BigNumberish,
      coefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTimeWeightedFee(uint256,uint256,uint256,uint256)"(
      expiry: BigNumberish,
      pointA: BigNumberish,
      pointB: BigNumberish,
      coefficient: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeLimitParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTradeLimitParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradeResult(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      newBaseIv: BigNumberish,
      newSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTradeResult((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256,uint256)"(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      newBaseIv: BigNumberish,
      newSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVarianceFee(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      skew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVarianceFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256),uint256)"(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      skew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVarianceFeeParams(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVarianceFeeParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVegaUtilFee(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVegaUtilFee((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),(uint256,int256,int256,int256,uint256,uint256,uint256))"(
      trade: TradeParametersStruct,
      pricing: TradePricingStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ivImpactForTrade(
      trade: TradeParametersStruct,
      boardBaseIv: BigNumberish,
      strikeSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ivImpactForTrade((bool,bool,uint8,uint8,uint256,uint256,uint256,(uint256,uint256,uint256,uint256,uint256,uint256),(uint256,bytes32,bytes32,uint256,uint256)),uint256,uint256)"(
      trade: TradeParametersStruct,
      boardBaseIv: BigNumberish,
      strikeSkew: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricingParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pricingParams()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tradeLimitParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tradeLimitParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    varianceFeeParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "varianceFeeParams()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
