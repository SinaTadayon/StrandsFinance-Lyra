/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type BlackScholesInputsStruct = {
  timeToExpirySec: BigNumberish;
  volatilityDecimal: BigNumberish;
  spotDecimal: BigNumberish;
  strikePriceDecimal: BigNumberish;
  rateDecimal: BigNumberish;
};

export type BlackScholesInputsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  timeToExpirySec: BigNumber;
  volatilityDecimal: BigNumber;
  spotDecimal: BigNumber;
  strikePriceDecimal: BigNumber;
  rateDecimal: BigNumber;
};

export type PricesDeltaStdVegaStruct = {
  callPrice: BigNumberish;
  putPrice: BigNumberish;
  callDelta: BigNumberish;
  putDelta: BigNumberish;
  vega: BigNumberish;
  stdVega: BigNumberish;
};

export type PricesDeltaStdVegaStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  callPrice: BigNumber;
  putPrice: BigNumber;
  callDelta: BigNumber;
  putDelta: BigNumber;
  vega: BigNumber;
  stdVega: BigNumber;
};

export interface BlackScholesInterface extends utils.Interface {
  functions: {
    "_stdNormalCDF(int256)": FunctionFragment;
    "delta((uint256,uint256,uint256,uint256,int256))": FunctionFragment;
    "optionPrices((uint256,uint256,uint256,uint256,int256))": FunctionFragment;
    "pricesDeltaStdVega((uint256,uint256,uint256,uint256,int256))": FunctionFragment;
    "vega((uint256,uint256,uint256,uint256,int256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_stdNormalCDF",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delta",
    values: [BlackScholesInputsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "optionPrices",
    values: [BlackScholesInputsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "pricesDeltaStdVega",
    values: [BlackScholesInputsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "vega",
    values: [BlackScholesInputsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "_stdNormalCDF",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optionPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricesDeltaStdVega",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vega", data: BytesLike): Result;

  events: {};
}

export interface BlackScholes extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlackScholesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _stdNormalCDF(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_stdNormalCDF(int256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    delta(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        callDeltaDecimal: BigNumber;
        putDeltaDecimal: BigNumber;
      }
    >;

    "delta((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        callDeltaDecimal: BigNumber;
        putDeltaDecimal: BigNumber;
      }
    >;

    optionPrices(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { call: BigNumber; put: BigNumber }>;

    "optionPrices((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { call: BigNumber; put: BigNumber }>;

    pricesDeltaStdVega(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<[PricesDeltaStdVegaStructOutput]>;

    "pricesDeltaStdVega((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<[PricesDeltaStdVegaStructOutput]>;

    vega(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { vegaDecimal: BigNumber }>;

    "vega((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { vegaDecimal: BigNumber }>;
  };

  _stdNormalCDF(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "_stdNormalCDF(int256)"(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  delta(
    bsInput: BlackScholesInputsStruct,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      callDeltaDecimal: BigNumber;
      putDeltaDecimal: BigNumber;
    }
  >;

  "delta((uint256,uint256,uint256,uint256,int256))"(
    bsInput: BlackScholesInputsStruct,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      callDeltaDecimal: BigNumber;
      putDeltaDecimal: BigNumber;
    }
  >;

  optionPrices(
    bsInput: BlackScholesInputsStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { call: BigNumber; put: BigNumber }>;

  "optionPrices((uint256,uint256,uint256,uint256,int256))"(
    bsInput: BlackScholesInputsStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { call: BigNumber; put: BigNumber }>;

  pricesDeltaStdVega(
    bsInput: BlackScholesInputsStruct,
    overrides?: CallOverrides
  ): Promise<PricesDeltaStdVegaStructOutput>;

  "pricesDeltaStdVega((uint256,uint256,uint256,uint256,int256))"(
    bsInput: BlackScholesInputsStruct,
    overrides?: CallOverrides
  ): Promise<PricesDeltaStdVegaStructOutput>;

  vega(
    bsInput: BlackScholesInputsStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "vega((uint256,uint256,uint256,uint256,int256))"(
    bsInput: BlackScholesInputsStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    _stdNormalCDF(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_stdNormalCDF(int256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delta(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        callDeltaDecimal: BigNumber;
        putDeltaDecimal: BigNumber;
      }
    >;

    "delta((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        callDeltaDecimal: BigNumber;
        putDeltaDecimal: BigNumber;
      }
    >;

    optionPrices(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { call: BigNumber; put: BigNumber }>;

    "optionPrices((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { call: BigNumber; put: BigNumber }>;

    pricesDeltaStdVega(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<PricesDeltaStdVegaStructOutput>;

    "pricesDeltaStdVega((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<PricesDeltaStdVegaStructOutput>;

    vega(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vega((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    _stdNormalCDF(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_stdNormalCDF(int256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    delta(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "delta((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionPrices(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "optionPrices((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricesDeltaStdVega(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pricesDeltaStdVega((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vega(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "vega((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _stdNormalCDF(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_stdNormalCDF(int256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delta(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "delta((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionPrices(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "optionPrices((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricesDeltaStdVega(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pricesDeltaStdVega((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vega(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "vega((uint256,uint256,uint256,uint256,int256))"(
      bsInput: BlackScholesInputsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
