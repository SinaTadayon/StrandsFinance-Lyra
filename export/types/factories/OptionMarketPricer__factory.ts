/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OptionMarketPricer,
  OptionMarketPricerInterface,
} from "../OptionMarketPricer";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
    ],
    name: "AlreadyInitialised",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "int256",
        name: "strikeCallDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "minDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "maxDelta",
        type: "int256",
      },
    ],
    name: "ForceCloseDeltaOutOfRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isBuy",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "newSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSkew",
        type: "uint256",
      },
    ],
    name: "ForceCloseSkewOutOfRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "standardSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentFactor",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.PricingParameters",
        name: "pricingParams",
        type: "tuple",
      },
    ],
    name: "InvalidPricingParameters",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        components: [
          {
            internalType: "int256",
            name: "minDelta",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minForceCloseDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "tradingCutoff",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMinSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMaxSkew",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "capSkewsToAbs",
            type: "bool",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeLimitParameters",
        name: "tradeLimitParams",
        type: "tuple",
      },
    ],
    name: "InvalidTradeLimitParameters",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "nominatedOwner",
        type: "address",
      },
    ],
    name: "OnlyNominatedOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "optionMarket",
        type: "address",
      },
    ],
    name: "OnlyOptionMarket",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OnlyOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "int256",
        name: "strikeCallDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "minDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "maxDelta",
        type: "int256",
      },
    ],
    name: "TradeDeltaOutOfRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tradingCutoff",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "boardExpiry",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentTime",
        type: "uint256",
      },
    ],
    name: "TradingCutoffReached",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isBuy",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "vol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "baseIv",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VolComponents",
        name: "currentVol",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "vol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "baseIv",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VolComponents",
        name: "newVol",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "vol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "baseIv",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VolComponents",
        name: "tradeBounds",
        type: "tuple",
      },
    ],
    name: "VolSkewOrBaseIvOutsideOfTradingBounds",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerNominated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "standardSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentFactor",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct OptionMarketPricer.PricingParameters",
        name: "pricingParams",
        type: "tuple",
      },
    ],
    name: "PricingParametersSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "minDelta",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minForceCloseDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "tradingCutoff",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMinSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMaxSkew",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "capSkewsToAbs",
            type: "bool",
          },
        ],
        indexed: false,
        internalType: "struct OptionMarketPricer.TradeLimitParameters",
        name: "tradeLimitParams",
        type: "tuple",
      },
    ],
    name: "TradeLimitParametersSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "defaultVarianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "forceCloseVarianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referenceSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticSkewAdjustment",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticVega",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVarianceCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticIvVariance",
            type: "uint256",
          },
        ],
        indexed: false,
        internalType: "struct OptionMarketPricer.VarianceFeeParameters",
        name: "varianceFeeParams",
        type: "tuple",
      },
    ],
    name: "VarianceFeeParametersSet",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getPricingParams",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "standardSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentFactor",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.PricingParameters",
        name: "pricingParameters",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expiry",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pointA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "pointB",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "coefficient",
        type: "uint256",
      },
    ],
    name: "getTimeWeightedFee",
    outputs: [
      {
        internalType: "uint256",
        name: "timeWeightedFee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTradeLimitParams",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "minDelta",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minForceCloseDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "tradingCutoff",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMinSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMaxSkew",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "capSkewsToAbs",
            type: "bool",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeLimitParameters",
        name: "tradeLimitParameters",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.TradeParameters",
        name: "trade",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPrice",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "preTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "postTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "callDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVariance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vega",
            type: "uint256",
          },
        ],
        internalType: "struct OptionGreekCache.TradePricing",
        name: "pricing",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "newBaseIv",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newSkew",
        type: "uint256",
      },
    ],
    name: "getTradeResult",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "preTradeAmmNetStdVega",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "postTradeAmmNetStdVega",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "vegaUtil",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "volTraded",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vegaUtilFee",
                type: "uint256",
              },
            ],
            internalType: "struct OptionMarketPricer.VegaUtilFeeComponents",
            name: "vegaUtilFee",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "varianceFeeCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vega",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vegaCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "skew",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "skewCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "ivVariance",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "ivVarianceCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "varianceFee",
                type: "uint256",
              },
            ],
            internalType: "struct OptionMarketPricer.VarianceFeeComponents",
            name: "varianceFee",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "totalFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newBaseIv",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newSkew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeResult",
        name: "tradeResult",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.TradeParameters",
        name: "trade",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPrice",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "preTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "postTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "callDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVariance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vega",
            type: "uint256",
          },
        ],
        internalType: "struct OptionGreekCache.TradePricing",
        name: "pricing",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "skew",
        type: "uint256",
      },
    ],
    name: "getVarianceFee",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "varianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vega",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVariance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVarianceCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "varianceFee",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VarianceFeeComponents",
        name: "varianceFeeComponents",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVarianceFeeParams",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "defaultVarianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "forceCloseVarianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referenceSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticSkewAdjustment",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticVega",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVarianceCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticIvVariance",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VarianceFeeParameters",
        name: "varianceFeeParameters",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.TradeParameters",
        name: "trade",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPrice",
            type: "uint256",
          },
          {
            internalType: "int256",
            name: "preTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "postTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "callDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVariance",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vega",
            type: "uint256",
          },
        ],
        internalType: "struct OptionGreekCache.TradePricing",
        name: "pricing",
        type: "tuple",
      },
    ],
    name: "getVegaUtilFee",
    outputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "preTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "postTradeAmmNetStdVega",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "vegaUtil",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "NAV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaUtilFee",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VegaUtilFeeComponents",
        name: "vegaUtilFeeComponents",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_optionMarket",
        type: "address",
      },
      {
        internalType: "contract OptionGreekCache",
        name: "_greekCache",
        type: "address",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.TradeParameters",
        name: "trade",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "boardBaseIv",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "strikeSkew",
        type: "uint256",
      },
    ],
    name: "ivImpactForTrade",
    outputs: [
      {
        internalType: "uint256",
        name: "newBaseIv",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newSkew",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "nominateNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nominatedOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pricingParams",
    outputs: [
      {
        internalType: "uint256",
        name: "optionPriceFeeCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optionPriceFee1xPoint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "optionPriceFee2xPoint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "spotPriceFeeCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "spotPriceFee1xPoint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "spotPriceFee2xPoint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "vegaFeeCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "standardSize",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "skewAdjustmentFactor",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "optionPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee1xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee2xPoint",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "standardSize",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentFactor",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.PricingParameters",
        name: "_pricingParams",
        type: "tuple",
      },
    ],
    name: "setPricingParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "int256",
            name: "minDelta",
            type: "int256",
          },
          {
            internalType: "int256",
            name: "minForceCloseDelta",
            type: "int256",
          },
          {
            internalType: "uint256",
            name: "tradingCutoff",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxBaseIV",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxVol",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMinSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "absMaxSkew",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "capSkewsToAbs",
            type: "bool",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeLimitParameters",
        name: "_tradeLimitParams",
        type: "tuple",
      },
    ],
    name: "setTradeLimitParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "defaultVarianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "forceCloseVarianceFeeCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skewAdjustmentCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "referenceSkew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticSkewAdjustment",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "vegaCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticVega",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "ivVarianceCoefficient",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minimumStaticIvVariance",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.VarianceFeeParameters",
        name: "_varianceFeeParams",
        type: "tuple",
      },
    ],
    name: "setVarianceFeeParams",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tradeLimitParams",
    outputs: [
      {
        internalType: "int256",
        name: "minDelta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "minForceCloseDelta",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "tradingCutoff",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minBaseIV",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxBaseIV",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minVol",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxVol",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "absMinSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "absMaxSkew",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "capSkewsToAbs",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "skew",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longCall",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortCallBase",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortCallQuote",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "longPut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "shortPut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "boardId",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarket.Strike",
        name: "strike",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "isBuy",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "isForceClose",
            type: "bool",
          },
          {
            internalType: "enum OptionMarket.TradeDirection",
            name: "tradeDirection",
            type: "uint8",
          },
          {
            internalType: "enum OptionMarket.OptionType",
            name: "optionType",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "expiry",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "strikePrice",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "freeLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "burnableLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedCollatLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pendingDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "usedDeltaLiquidity",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
            ],
            internalType: "struct LiquidityPool.Liquidity",
            name: "liquidity",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "spotPrice",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "quoteKey",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "baseKey",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "quoteBaseFeeRate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "baseQuoteFeeRate",
                type: "uint256",
              },
            ],
            internalType: "struct SynthetixAdapter.ExchangeParams",
            name: "exchangeParams",
            type: "tuple",
          },
        ],
        internalType: "struct OptionMarket.TradeParameters",
        name: "trade",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "boardBaseIv",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "boardExpiry",
        type: "uint256",
      },
    ],
    name: "updateCacheAndGetTradeResult",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "optionPriceFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "spotPriceFee",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "int256",
                name: "preTradeAmmNetStdVega",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "postTradeAmmNetStdVega",
                type: "int256",
              },
              {
                internalType: "uint256",
                name: "vegaUtil",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "volTraded",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "NAV",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vegaUtilFee",
                type: "uint256",
              },
            ],
            internalType: "struct OptionMarketPricer.VegaUtilFeeComponents",
            name: "vegaUtilFee",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "varianceFeeCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vega",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "vegaCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "skew",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "skewCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "ivVariance",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "ivVarianceCoefficient",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "varianceFee",
                type: "uint256",
              },
            ],
            internalType: "struct OptionMarketPricer.VarianceFeeComponents",
            name: "varianceFee",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "totalFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "volTraded",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newBaseIv",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "newSkew",
            type: "uint256",
          },
        ],
        internalType: "struct OptionMarketPricer.TradeResult",
        name: "tradeResult",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "varianceFeeParams",
    outputs: [
      {
        internalType: "uint256",
        name: "defaultVarianceFeeCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "forceCloseVarianceFeeCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "skewAdjustmentCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "referenceSkew",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minimumStaticSkewAdjustment",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "vegaCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minimumStaticVega",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "ivVarianceCoefficient",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minimumStaticIvVariance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526001805460ff60a01b1916905534801561001d57600080fd5b50600080546001600160a01b0319163390811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a16124f78061007b6000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063da53763111610071578063da53763114610320578063ea5b522514610328578063f09a4016146103bc578063f7b7a60c146103cf578063ffae4b36146103e257600080fd5b80638da5cb5b1461028d5780638e9cbe08146102a05780639757b2fa146102ca578063ccfcdb22146102df578063d44558d2146102ff57600080fd5b80635e2276d7116100f45780635e2276d7146101d15780636f2fddc6146101f157806379ba50971461025f5780637f731ae014610267578063895ccf8d1461027a57600080fd5b80630792061b146101315780631627540c1461014657806344b23bf21461015957806353a47bb7146101865780635c2ddc32146101b1575b600080fd5b61014461013f3660046118c6565b6103f7565b005b6101446101543660046118fb565b610480565b61016c610167366004611af6565b6104d6565b604080519283526020830191909152015b60405180910390f35b600154610199906001600160a01b031681565b6040516001600160a01b03909116815260200161017d565b6101c46101bf366004611b2d565b610560565b60405161017d9190611bfd565b6101e46101df366004611d21565b610a1e565b60405161017d9190611d62565b600454600554600654600754600854600954600a54600b54600c5461021b98979695949392919089565b60408051998a5260208a0198909852968801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200161017d565b610144610b9c565b610144610275366004611d71565b610c54565b6101446102883660046118c6565b610e99565b600054610199906001600160a01b031681565b601954601a54601b54601c54601d54601e54601f5460205460215461021b98979695949392919089565b6102d2610fef565b60405161017d9190611e6d565b6102f26102ed366004611e7c565b611098565b60405161017d9190611eb3565b61031261030d366004611ec1565b6111db565b60405190815260200161017d565b6102d2611258565b600d54600e54600f546010546011546012546013546014546015546016546017546018546103619b9a9998979695949392919060ff168c565b604080519c8d5260208d019b909b52998b019890985260608a0196909652608089019490945260a088019290925260c087015260e086015261010085015261012084015261014083015215156101608201526101800161017d565b6101446103ca366004611ef3565b6112fe565b6101c46103dd366004611f2c565b611374565b6103ea6114fc565b60405161017d9190611ffc565b6103ff6115d9565b80516019908155602080830151601a55604080840151601b556060840151601c556080840151601d5560a0840151601e5560c0840151601f5560e0840151909155610100830151602155517f8196d36b161b7bf4e32a34268d55b3e5211a1aedfb069fffae9fe9f05485397b916104759161200b565b60405180910390a150565b6104886115d9565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce2290602001610475565b60008060006104f7600460070154876080015161162190919063ffffffff16565b90506000610506606483612080565b600c5490915060009061051a908390611644565b8851909150156105445761052e82886120a2565b61053882886120a2565b94509450505050610558565b61054e82886120ba565b61053882886120ba565b935093915050565b610568611707565b6002546001600160a01b031633146105b357600254604051634b50cc3560e11b81523060048201523360248201526001600160a01b0390911660448201526064015b60405180910390fd5b6000806105c5868689604001516104d6565b91509150600084600d60020154426105dd91906120a2565b11905086602001511561066a57859250600287604001516002811115610605576106056120d1565b1415801561062157506016548211158061062157506017548210155b1561066557865160165460175460405163c741687360e01b81523060048201529215156024840152604483018590526064830191909152608482015260a4016105aa565b61082f565b801561069257600f546040516332cc7c9760e21b81526105aa913091889042906004016120e7565b600061069e8484611644565b88519091501561076d576015548111806106b9575060115484115b806106c5575060135483115b156107685730886000015160405180606001604052806106f28d604001518c61164490919063ffffffff16565b81526020018a81526020018c604001518152506040518060600160405280858152602001888152602001878152506040518060600160405280600d600801548152602001600d600401548152602001600d60060154815250604051631a36007360e01b81526004016105aa95949392919061210d565b61082d565b60145481108061077e575060105484105b8061078a575060125483105b1561082d5730886000015160405180606001604052806107b78d604001518c61164490919063ffffffff16565b81526020018a81526020018c604001518152506040518060600160405280858152602001888152602001878152506040518060600160405280600d600701548152602001600d600301548152602001600d60050154815250604051631a36007360e01b81526004016105aa95949392919061210d565b505b60185460ff16156108575761085461084c83600d600a015461165c565b601654611672565b91505b60035460405163fde28b8360e01b81526000916001600160a01b03169063fde28b8390610890908c908c908990899089906004016121ae565b60e060405180830381600087803b1580156108aa57600080fd5b505af11580156108be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e29190612288565b905087602001511561099057600288604001516002811115610906576109066120d1565b14158015610912575081155b1561098b57600e5460608201511380156109475750600e546109366012600a6123fe565b610940919061240a565b8160600151125b1561098b576060810151600e54309190806109646012600a6123fe565b61096e919061240a565b60405163240a4ba360e11b81526004016105aa94939291906120e7565b610a03565b600d54606082015112806109bf5750600d546109ae6012600a6123fe565b6109b8919061240a565b8160600151135b15610a03576060810151600d54309190806109dc6012600a6123fe565b6109e6919061240a565b60405163d937376960e01b81526004016105aa94939291906120e7565b610a0f88828686611374565b9450505050505b949350505050565b610a2661179e565b60008460200151610a3957601954610a3d565b601a545b905080610a9357604051806101000160405280600081526020018560c00151815260200160008152602001848152602001600081526020018560a001518152602001600081526020016000815250915050610b95565b601e5460c0850151600091610aa89190611644565b601f54610ab591906120a2565b90506000610af1601960020154610aeb610ad3601960030154611681565b610adc89611681565b610ae6919061240a565b6116ef565b90611644565b601d54610afe91906120a2565b60205460a0880151919250600091610b1591611644565b602154610b2291906120a2565b90506000610b498960800151610aeb84610aeb87610aeb8a8c61164490919063ffffffff16565b90506040518061010001604052808681526020018960c0015181526020018581526020018881526020018481526020018960a00151815260200183815260200182815250955050505050505b9392505050565b6001546001600160a01b03163314610be2576001546040516312d9f3db60e31b81523060048201523360248201526001600160a01b0390911660448201526064016105aa565b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b610c5c6115d9565b8051670de0b6b3a764000012801590610c815750670de0b6b3a7640000816020015113155b8015610c91575060008160400151115b8015610ca45750620d2f00816040015111155b8015610cbb5750678ac7230489e800008160600151105b8015610ccb575060008160800151115b8015610ce3575068056bc75e2d631000008160800151105b8015610cfa5750678ac7230489e800008160a00151105b8015610d0a575060008160c00151115b8015610d215750678ac7230489e800008160c00151105b8015610d3257506000816101000151115b8015610d4757508060c0015181610140015110155b8015610d5c57508060a0015181610120015111155b610d7d57308160405163176212d760e21b81526004016105aa929190612449565b8051600d9081556020820151600e55604080830151600f556060830151601055608083015160115560a083015160125560c083015160135560e08301516014556101008301516015556101208301516016556101408301516017556101608301516018805460ff1916911515919091179055517f23e2f19ae7640ea47fd0a4d2986c05242094dc86e81df3c445f1f86c4ffd247091610475918154815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a820154610140820152600b9091015460ff1615156101608201526101800190565b610ea16115d9565b8051680ad78ebc5ac620000010801590610ec75750671bc16d674ec80000816060015111155b8015610eda575062093a80816020015110155b8015610efb57506020810151610ef39062093a806120a2565b816040015110155b8015610f0e575062093a80816080015110155b8015610f2f57506080810151610f279062093a806120a2565b8160a0015110155b8015610f3f575060008160e00151115b8015610f595750683635c9adc5dea0000081610100015111155b610f7a573081604051632abe92ff60e01b81526004016105aa929190612467565b8051600490815560208201516005556040808301516006556060830151600755608083015160085560a083015160095560c0830151600a5560e0830151600b55610100830151600c55517f711f183bddaf64ef835c226f41269be5151112d393dbb05c83746bff24390a2a916104759161200b565b61103e6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b5060408051610120810182526019548152601a54602080830191909152601b5492820192909252601c546060820152601d546080820152601e5460a0820152601f5460c0820152905460e082015260215461010082015290565b6110d16040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6110de82604001516116ef565b6110eb83602001516116ef565b1061113a576040518060c00160405280836020015181526020018360400151815260200160008152602001836080015181526020018460e0015160a001518152602001600081525090506111d5565b60006111698460e0015160a0015161116361115886604001516116ef565b608087015190611644565b90611621565b9050600061118d8560800151610aeb8460046006015461164490919063ffffffff16565b90506040518060c001604052808560200151815260200185604001518152602001838152602001856080015181526020018660e0015160a00151815260200182815250925050505b92915050565b6000806111e842876120ba565b90508481116111fa5782915050610a16565b61124e61120786866120ba565b6112136012600a6123fe565b61121d88856120ba565b6112279190612485565b6112319190612080565b61123d6012600a6123fe565b61124791906120a2565b8490611644565b9695505050505050565b6112a76040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b50604080516101208101825260045481526005546020820152600654918101919091526007546060820152600854608082015260095460a0820152600a5460c0820152600b5460e0820152600c5461010082015290565b6113066115d9565b600154600160a01b900460ff16156113335760405163161b906f60e01b81523060048201526024016105aa565b6001805460ff60a01b1916600160a01b179055600280546001600160a01b039384166001600160a01b03199182161790915560038054929093169116179055565b61137c611707565b608085015184516000916113909190611644565b905060006113b38760a001516004600101546004600201546004600001546111db565b905060006113d58860a0015160048001546004600501546004600301546111db565b905060006113e38385611644565b9050600061140b8a60800151610aeb8c6101000151600001518661164490919063ffffffff16565b905060006114198b8b611098565b905060006114288c8c8b610a1e565b905060008160e001518360a00151858761144291906120a2565b61144c91906120a2565b61145691906120a2565b905060008d60000151156114755761146e828a6120a2565b9050611495565b8882111561148857508790506000611495565b611492828a6120ba565b90505b6040518061016001604052808f6080015181526020018a81526020018781526020018681526020018581526020018481526020018381526020018281526020018e6080015181526020018d81526020018c8152509950505050505050505050949350505050565b61156260405180610180016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b506040805161018081018252600d548152600e546020820152600f54918101919091526010546060820152601154608082015260125460a082015260135460c082015260145460e082015260155461010082015260165461012082015260175461014082015260185460ff16151561016082015290565b6000546001600160a01b0316331461161f5760005460405163035785f360e31b81523060048201523360248201526001600160a01b0390911660448201526064016105aa565b565b6000816116306012600a6123fe565b61163a9085612485565b610b959190612080565b60006116526012600a6123fe565b61163a8385612485565b600081831061166b5781610b95565b5090919050565b600081831161166b5781610b95565b60006001600160ff1b038211156116eb5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016105aa565b5090565b60008082126116fe57816111d5565b6111d5826124a4565b604051806101600160405280600081526020016000815260200160008152602001600081526020016117686040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b815260200161177561179e565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b604051610120810167ffffffffffffffff8111828210171561181557634e487b7160e01b600052604160045260246000fd5b60405290565b604051610180810167ffffffffffffffff8111828210171561181557634e487b7160e01b600052604160045260246000fd5b6000610120828403121561186057600080fd5b6118686117e3565b9050813581526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525092915050565b600061012082840312156118d957600080fd5b610b95838361184d565b6001600160a01b03811681146118f857600080fd5b50565b60006020828403121561190d57600080fd5b8135610b95816118e3565b8035801515811461192857600080fd5b919050565b80356003811061192857600080fd5b80356005811061192857600080fd5b600060c0828403121561195d57600080fd5b60405160c0810181811067ffffffffffffffff8211171561198e57634e487b7160e01b600052604160045260246000fd5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b600060a082840312156119e557600080fd5b60405160a0810181811067ffffffffffffffff82111715611a1657634e487b7160e01b600052604160045260246000fd5b806040525080915082358152602083013560208201526040830135604082015260608301356060820152608083013560808201525092915050565b60006102408284031215611a6457600080fd5b611a6c6117e3565b9050611a7782611918565b8152611a8560208301611918565b6020820152611a966040830161192d565b6040820152611aa76060830161193c565b60608201526080820135608082015260a082013560a082015260c082013560c0820152611ad78360e0840161194b565b60e0820152611aea836101a084016119d3565b61010082015292915050565b60008060006102808486031215611b0c57600080fd5b611b168585611a51565b956102408501359550610260909401359392505050565b6000806000806103a08587031215611b4457600080fd5b611b4e868661184d565b9350611b5e866101208701611a51565b939693955050505061036082013591610380013590565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301525050565b60006102e082019050825182526020830151602083015260408301516040830152606083015160608301526080830151611c3a6080840182611b75565b5060a0830151610140611c4f81850183611baf565b60c085015161024085015260e08501516102608501526101008501516102808501526101208501516102a0850152808501516102c0850152505092915050565b600060e08284031215611ca157600080fd5b60405160e0810181811067ffffffffffffffff82111715611cd257634e487b7160e01b600052604160045260246000fd5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c08201525092915050565b60008060006103408486031215611d3757600080fd5b611d418585611a51565b9250611d51856102408601611c8f565b915061032084013590509250925092565b61010081016111d58284611baf565b60006101808284031215611d8457600080fd5b611d8c61181b565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a082015260c083013560c082015260e083013560e0820152610100808401358183015250610120808401358183015250610140808401358183015250610160611e08818501611918565b908201529392505050565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152505050565b61012081016111d58284611e13565b6000806103208385031215611e9057600080fd5b611e9a8484611a51565b9150611eaa846102408501611c8f565b90509250929050565b60c081016111d58284611b75565b60008060008060808587031215611ed757600080fd5b5050823594602084013594506040840135936060013592509050565b60008060408385031215611f0657600080fd5b8235611f11816118e3565b91506020830135611f21816118e3565b809150509250929050565b6000806000806103608587031215611f4357600080fd5b611f4d8686611a51565b9350611f5d866102408701611c8f565b939693955050505061032082013591610340013590565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151818401525061012080820151818401525061014080820151818401525061016080820151611ff68285018215159052565b50505050565b61018081016111d58284611f74565b8154815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460c0820152600782015460e0820152600882015461010082015261012081016111d5565b634e487b7160e01b600052601160045260246000fd5b60008261209d57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156120b5576120b561206a565b500190565b6000828210156120cc576120cc61206a565b500390565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6001600160a01b03861681528415156020820152610160810161214760408301868051825260208082015190830152604090810151910152565b835160a0830152602084015160c0830152604084015160e08301528251610100830152602083015161012083015260408301516101408301529695505050505050565b6003811061219a5761219a6120d1565b9052565b6005811061219a5761219a6120d1565b6103c081016121bd8288611e13565b855115156101208301526020860151151561014083015260408601516121e761016084018261218a565b5060608601516121fb61018084018261219e565b5060808601516101a083015260a08601516101c083015260c08601516101e083015260e0860151612230610200840182611b75565b5061010086015180516102c084015260208101516102e08401526040810151610300840152606081015161032084015260800151610340830152610360820185905261038082018490528215156103a083015261124e565b600060e0828403121561229a57600080fd5b60405160e0810181811067ffffffffffffffff821117156122cb57634e487b7160e01b600052604160045260246000fd5b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201528091505092915050565b600181815b8085111561235557816000190482111561233b5761233b61206a565b8085161561234857918102915b93841c939080029061231f565b509250929050565b60008261236c575060016111d5565b81612379575060006111d5565b816001811461238f5760028114612399576123b5565b60019150506111d5565b60ff8411156123aa576123aa61206a565b50506001821b6111d5565b5060208310610133831016604e8410600b84101617156123d8575081810a6111d5565b6123e2838361231a565b80600019048211156123f6576123f661206a565b029392505050565b6000610b95838361235d565b60008083128015600160ff1b8501841216156124285761242861206a565b6001600160ff1b03840183138116156124435761244361206a565b50500390565b6001600160a01b03831681526101a08101610b956020830184611f74565b6001600160a01b03831681526101408101610b956020830184611e13565b600081600019048311821515161561249f5761249f61206a565b500290565b6000600160ff1b8214156124ba576124ba61206a565b506000039056fea2646970667358221220b448f61a293838dd407b5eff67b0ceadbdab7b42f63a1b2111e4fd47356296ee64736f6c63430008090033";

type OptionMarketPricerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OptionMarketPricerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OptionMarketPricer__factory extends ContractFactory {
  constructor(...args: OptionMarketPricerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OptionMarketPricer> {
    return super.deploy(overrides || {}) as Promise<OptionMarketPricer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OptionMarketPricer {
    return super.attach(address) as OptionMarketPricer;
  }
  connect(signer: Signer): OptionMarketPricer__factory {
    return super.connect(signer) as OptionMarketPricer__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OptionMarketPricerInterface {
    return new utils.Interface(_abi) as OptionMarketPricerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OptionMarketPricer {
    return new Contract(address, _abi, signerOrProvider) as OptionMarketPricer;
  }
}
