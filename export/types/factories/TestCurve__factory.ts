/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestCurve, TestCurveInterface } from "../TestCurve";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "nominatedOwner",
        type: "address",
      },
    ],
    name: "OnlyNominatedOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OnlyOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerNominated",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "",
        type: "int128",
      },
    ],
    name: "curveStables",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int128",
        name: "_from",
        type: "int128",
      },
      {
        internalType: "int128",
        name: "_to",
        type: "int128",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_expected",
        type: "uint256",
      },
    ],
    name: "exchange_underlying",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_expected",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_receiver",
        type: "address",
      },
    ],
    name: "exchange_with_best_rate",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "get_best_rate",
    outputs: [
      {
        internalType: "address",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "nominateNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nominatedOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "rates",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
    ],
    name: "setRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163390811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a1610b288061006e6000396000f3fe6080604052600436106100915760003560e01c806379ba50971161005957806379ba50971461018a5780638da5cb5b1461019f5780639f69a6a6146101bf578063a6417ed6146101e0578063a8734f0b146101f357600080fd5b80631627540c146100965780632bdb7097146100b85780634e21df75146100d857806353a47bb71461011c578063570a9e1614610154575b600080fd5b3480156100a257600080fd5b506100b66100b13660046108f7565b610220565b005b3480156100c457600080fd5b506100b66100d3366004610919565b61027c565b3480156100e457600080fd5b506100f86100f3366004610943565b6102a0565b604080516001600160a01b0390931683526020830191909152015b60405180910390f35b34801561012857600080fd5b5060015461013c906001600160a01b031681565b6040516001600160a01b039091168152602001610113565b34801561016057600080fd5b5061013c61016f366004610991565b6003602052600090815260409020546001600160a01b031681565b34801561019657600080fd5b506100b66102ea565b3480156101ab57600080fd5b5060005461013c906001600160a01b031681565b6101d26101cd3660046109ac565b6103a7565b604051908152602001610113565b6101d26101ee366004610a03565b610601565b3480156101ff57600080fd5b506101d261020e3660046108f7565b60026020526000908152604090205481565b610228610893565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229060200160405180910390a150565b610284610893565b6001600160a01b03909116600090815260026020526040902055565b6001600160a01b0380841660009081526002602052604080822054928516825281205490918291816102d28287610a45565b6102dc9190610a72565b309890975095505050505050565b6001546001600160a01b03163314610335576001546040516312d9f3db60e31b81523060048201523360248201526001600160a01b0390911660448201526064015b60405180910390fd5b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b600085856001600160a01b038216158015906103cb57506001600160a01b03811615155b6103e75760405162461bcd60e51b815260040161032c90610a94565b6040516370a0823160e01b81526001600160a01b038581166004830152600091908416906370a082319060240160206040518083038186803b15801561042c57600080fd5b505afa158015610440573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104649190610ad9565b9050868110156104af5760405162461bcd60e51b81526020600482015260166024820152756e6f7420656e6f75676820746f2065786368616e676560501b604482015260640161032c565b604051632770a7eb60e21b81526001600160a01b03868116600483015260248201899052841690639dc29fac90604401600060405180830381600087803b1580156104f957600080fd5b505af115801561050d573d6000803e3d6000fd5b505050506001600160a01b0389811660009081526002602052604080822054928b1682529020548161053f828b610a45565b6105499190610a72565b9550878610156105915760405162461bcd60e51b81526020600482015260136024820152721b9bdd08195b9bdd59da08195e1c1958dd1959606a1b604482015260640161032c565b6040516340c10f1960e01b81526001600160a01b038881166004830152602482018890528516906340c10f1990604401600060405180830381600087803b1580156105db57600080fd5b505af11580156105ef573d6000803e3d6000fd5b50505050505050505095945050505050565b600f84810b600090815260036020526040808220549286900b825281205490916001600160a01b039081169116811580159061064557506001600160a01b03811615155b6106615760405162461bcd60e51b815260040161032c90610a94565b6040516370a0823160e01b81523360048201526000906001600160a01b038416906370a082319060240160206040518083038186803b1580156106a357600080fd5b505afa1580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db9190610ad9565b9050858110156107265760405162461bcd60e51b81526020600482015260166024820152756e6f7420656e6f75676820746f2065786368616e676560501b604482015260640161032c565b604051632770a7eb60e21b8152336004820152602481018790526001600160a01b03841690639dc29fac90604401600060405180830381600087803b15801561076e57600080fd5b505af1158015610782573d6000803e3d6000fd5b50505050600f88810b6000908152600360208181526040808420546001600160a01b039081168552600280845282862054968e900b865293835281852054168452919052902054816107d4828a610a45565b6107de9190610a72565b9550868610156108265760405162461bcd60e51b81526020600482015260136024820152721b9bdd08195b9bdd59da08195e1c1958dd1959606a1b604482015260640161032c565b6040516340c10f1960e01b8152336004820152602481018790526001600160a01b038516906340c10f1990604401600060405180830381600087803b15801561086e57600080fd5b505af1158015610882573d6000803e3d6000fd5b505050505050505050949350505050565b6000546001600160a01b031633146108d95760005460405163035785f360e31b81523060048201523360248201526001600160a01b03909116604482015260640161032c565b565b80356001600160a01b03811681146108f257600080fd5b919050565b60006020828403121561090957600080fd5b610912826108db565b9392505050565b6000806040838503121561092c57600080fd5b610935836108db565b946020939093013593505050565b60008060006060848603121561095857600080fd5b610961846108db565b925061096f602085016108db565b9150604084013590509250925092565b8035600f81900b81146108f257600080fd5b6000602082840312156109a357600080fd5b6109128261097f565b600080600080600060a086880312156109c457600080fd5b6109cd866108db565b94506109db602087016108db565b935060408601359250606086013591506109f7608087016108db565b90509295509295909350565b60008060008060808587031215610a1957600080fd5b610a228561097f565b9350610a306020860161097f565b93969395505050506040820135916060013590565b6000816000190483118215151615610a6d57634e487b7160e01b600052601160045260246000fd5b500290565b600082610a8f57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526025908201527f746f6b656e20696e206f7220746f6b656e206f7574206973207a65726f206164604082015264647265737360d81b606082015260800190565b600060208284031215610aeb57600080fd5b505191905056fea26469706673582212209c402f8569d4094d6bbd2f33e7a33d5fe7ffe59ce718fc234439bf01bb08e54264736f6c63430008090033";

type TestCurveConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestCurveConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestCurve__factory extends ContractFactory {
  constructor(...args: TestCurveConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestCurve> {
    return super.deploy(overrides || {}) as Promise<TestCurve>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestCurve {
    return super.attach(address) as TestCurve;
  }
  connect(signer: Signer): TestCurve__factory {
    return super.connect(signer) as TestCurve__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestCurveInterface {
    return new utils.Interface(_abi) as TestCurveInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestCurve {
    return new Contract(address, _abi, signerOrProvider) as TestCurve;
  }
}
