/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockAggregatorV2V3,
  MockAggregatorV2V3Interface,
} from "../MockAggregatorV2V3";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "allRoundDataShouldRevert",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "entries",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_roundId",
        type: "uint256",
      },
    ],
    name: "getAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_roundId",
        type: "uint256",
      },
    ],
    name: "getTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "keyDecimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundDataShouldRevert",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "roundId",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_shouldRevert",
        type: "bool",
      },
    ],
    name: "setAllRoundDataShouldRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    name: "setDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "setLatestAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "setLatestAnswerWithRound",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_shouldRevert",
        type: "bool",
      },
    ],
    name: "setLatestRoundDataShouldRevert",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600080546001600160581b031916905534801561002057600080fd5b50610814806100306000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80639a6fc8f511610097578063b633620c11610066578063b633620c146103bc578063e9c58f8514610428578063fc8f20a71461043b578063feaf968c1461044857600080fd5b80639a6fc8f51461029a578063b19cafe1146102e1578063b30906d414610309578063b5ab58dc1461035257600080fd5b8063668a0f02116100d3578063668a0f02146101875780637a1395aa146101a25780637b28d483146101d05780638cd221c91461026f57600080fd5b80632c746cae146101055780632f1b9a0c14610130578063313ce5671461015257806357d4f5e014610164575b600080fd5b60005461011990600160501b900460ff1681565b60405160ff90911681526020015b60405180910390f35b60025461014290610100900460ff1681565b6040519015158152602001610127565b600054600160501b900460ff16610119565b6101856101723660046106b6565b6002805460ff1916911515919091179055565b005b6000546001600160501b03165b604051908152602001610127565b6101856101b03660046106df565b6000805460ff909216600160501b0260ff60501b19909216919091179055565b6101856101de36600461071e565b6000805469ffffffffffffffffffff199081166001600160501b0393841690811783556040805160a0810182528281526020808201988952818301888152606083019889526080830185815294875260019182905292909520905181548516908716178155965193870193909355915160028601559251600385015551600490930180549092169216919091179055565b600054610282906001600160501b031681565b6040516001600160501b039091168152602001610127565b6102ad6102a8366004610753565b610450565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a001610127565b6101856102ef3660046106b6565b600280549115156101000261ff0019909216919091179055565b6102ad61031736600461076e565b6001602081905260009182526040909120805491810154600282015460038301546004909301546001600160501b0394851694929391921685565b61019461036036600461076e565b600090815260016020818152604092839020835160a08101855281546001600160501b03908116825293820154928101839052600282015494810194909452600381015460608501526004015490911660809092019190915290565b6101946103ca36600461076e565b600090815260016020818152604092839020835160a08101855281546001600160501b039081168252938201549281019290925260028101549382019390935260038301546060820181905260049093015490911660809091015290565b610185610436366004610787565b61056d565b6002546101429060ff1681565b6102ad61062b565b600254600090819081908190819060ff16156104ab5760405162461bcd60e51b815260206004820152601560248201527419d95d149bdd5b9911185d18481c995d995c9d1959605a1b60448201526064015b60405180910390fd5b6001600160501b03808716600090815260016020818152604092839020835160a081018552815486168152928101549183019190915260028101549282019290925260038201546060820181905260049092015490921660808301526105455760405162461bcd60e51b815260206004820152600f60248201526e139bc819185d18481c1c995cd95b9d608a1b60448201526064016104a2565b8051602082015160408301516060840151608090940151929a91995097509195509350915050565b600080546001600160501b03169080610585836107a9565b82546101009290920a6001600160501b038181021990931691831602179091556040805160a08101825260008054841680835260208084019889528385018881526060850198895260808501838152928452600191829052949092209251835469ffffffffffffffffffff199081169187169190911784559751918301919091559151600282015593516003850155516004909301805490941692169190911790915550565b6000806000806000600260019054906101000a900460ff16156106905760405162461bcd60e51b815260206004820152601860248201527f6c6174657374526f756e6444617461207265766572746564000000000000000060448201526064016104a2565b6106a56102a86000546001600160501b031690565b945094509450945094509091929394565b6000602082840312156106c857600080fd5b813580151581146106d857600080fd5b9392505050565b6000602082840312156106f157600080fd5b813560ff811681146106d857600080fd5b80356001600160501b038116811461071957600080fd5b919050565b60008060006060848603121561073357600080fd5b833592506020840135915061074a60408501610702565b90509250925092565b60006020828403121561076557600080fd5b6106d882610702565b60006020828403121561078057600080fd5b5035919050565b6000806040838503121561079a57600080fd5b50508035926020909101359150565b60006001600160501b03808316818114156107d457634e487b7160e01b600052601160045260246000fd5b600101939250505056fea264697066735822122003d74e3e996073409ece5874690c1c8d20c37adb588be0633dce3ef0c4eb144264736f6c63430008090033";

type MockAggregatorV2V3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockAggregatorV2V3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockAggregatorV2V3__factory extends ContractFactory {
  constructor(...args: MockAggregatorV2V3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockAggregatorV2V3> {
    return super.deploy(overrides || {}) as Promise<MockAggregatorV2V3>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockAggregatorV2V3 {
    return super.attach(address) as MockAggregatorV2V3;
  }
  connect(signer: Signer): MockAggregatorV2V3__factory {
    return super.connect(signer) as MockAggregatorV2V3__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAggregatorV2V3Interface {
    return new utils.Interface(_abi) as MockAggregatorV2V3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockAggregatorV2V3 {
    return new Contract(address, _abi, signerOrProvider) as MockAggregatorV2V3;
  }
}
