/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LyraAdapter, LyraAdapterInterface } from "../LyraAdapter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "baseExpected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "baseReceived",
        type: "uint256",
      },
    ],
    name: "ExchangerBaseReceivedTooLow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "quoteExpected",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "quoteReceived",
        type: "uint256",
      },
    ],
    name: "ExchangerQuoteReceivedTooLow",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "baseAsset",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "curveSwap",
    outputs: [
      {
        internalType: "contract ICurve",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeCounter",
    outputs: [
      {
        internalType: "contract BasicFeeCounter",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "greekCache",
    outputs: [
      {
        internalType: "contract IOptionGreekCache",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gwavOracle",
    outputs: [
      {
        internalType: "contract IGWAVOracle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "liquidityPool",
    outputs: [
      {
        internalType: "contract ILiquidityPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lyraRegistry",
    outputs: [
      {
        internalType: "contract ILyraRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "optionMarket",
    outputs: [
      {
        internalType: "contract IOptionMarket",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "optionPricer",
    outputs: [
      {
        internalType: "contract IOptionMarketPricer",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "optionToken",
    outputs: [
      {
        internalType: "contract IOptionToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "quoteAsset",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_lyraRegistry",
        type: "address",
      },
      {
        internalType: "address",
        name: "_optionMarket",
        type: "address",
      },
      {
        internalType: "address",
        name: "_curveSwap",
        type: "address",
      },
      {
        internalType: "address",
        name: "_feeCounter",
        type: "address",
      },
    ],
    name: "setLyraAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "shortCollateral",
    outputs: [
      {
        internalType: "contract IShortCollateral",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "updateDelegateApproval",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c7a8061007e6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063a65be9ba116100a2578063cdf456e111610071578063cdf456e1146101fa578063d8fca1ac1461020d578063ee9e0e6a14610220578063f2fde38b14610233578063fdf262b71461024657600080fd5b8063a65be9ba146101ae578063b5ca94a0146101c1578063bb4a9f88146101d4578063cae1c582146101e757600080fd5b8063665a11ca116100de578063665a11ca1461016f578063715018a614610182578063870dcaeb1461018a5780638da5cb5b1461019d57600080fd5b80632bab754b1461011057806338b740541461013f5780635794981514610152578063619a84cc14610165575b600080fd5b600454610123906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600954610123906001600160a01b031681565b600d54610123906001600160a01b031681565b61016d610259565b005b600554610123906001600160a01b031681565b61016d610372565b600654610123906001600160a01b031681565b6000546001600160a01b0316610123565b600754610123906001600160a01b031681565b61016d6101cf366004610a2e565b6103a8565b600354610123906001600160a01b031681565b600854610123906001600160a01b031681565b600b54610123906001600160a01b031681565b600c54610123906001600160a01b031681565b600154610123906001600160a01b031681565b61016d610241366004610a8a565b6107f8565b600a54610123906001600160a01b031681565b6000546001600160a01b0316331461028c5760405162461bcd60e51b815260040161028390610aae565b60405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b0316633535c97b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102da57600080fd5b505afa1580156102ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103129190610af3565b60025460405163447fbc6360e01b81526001600160a01b03918216600482015291169063447fbc6390602401600060405180830381600087803b15801561035857600080fd5b505af115801561036c573d6000803e3d6000fd5b50505050565b6000546001600160a01b0316331461039c5760405162461bcd60e51b815260040161028390610aae565b6103a66000610893565b565b6000546001600160a01b031633146103d25760405162461bcd60e51b815260040161028390610aae565b600a546001600160a01b03161561046d57600a5460035460405163095ea7b360e01b81526001600160a01b0391821660048201526000602482015291169063095ea7b390604401602060405180830381600087803b15801561043357600080fd5b505af1158015610447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061046b9190610b10565b505b600b546001600160a01b03161561050857600b5460035460405163095ea7b360e01b81526001600160a01b0391821660048201526000602482015291169063095ea7b390604401602060405180830381600087803b1580156104ce57600080fd5b505af11580156104e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105069190610b10565b505b600380546001600160a01b038581166001600160a01b031992831617909255600180549287169290911682179055604051623f970360e91b81527029aca72a2422aa24ac2fa0a220a82a22a960791b6004820152637f2e06009060240160206040518083038186803b15801561057d57600080fd5b505afa158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b59190610af3565b600280546001600160a01b0319166001600160a01b03929092169190911790556105dd6108e3565b600c80546001600160a01b038085166001600160a01b031992831617909255600d8054848416921691909117905560025460408051633535c97b60e01b815290519190921691633535c97b916004808301926020929190829003018186803b15801561064857600080fd5b505afa15801561065c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106809190610af3565b60025460405163447fbc6360e01b81526001600160a01b03918216600482015291169063447fbc6390602401600060405180830381600087803b1580156106c657600080fd5b505af11580156106da573d6000803e3d6000fd5b5050600a5460035460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116925063095ea7b39150604401602060405180830381600087803b15801561072f57600080fd5b505af1158015610743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107679190610b10565b50600b5460035460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b390604401602060405180830381600087803b1580156107b957600080fd5b505af11580156107cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f19190610b10565b5050505050565b6000546001600160a01b031633146108225760405162461bcd60e51b815260040161028390610aae565b6001600160a01b0381166108875760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610283565b61089081610893565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60015460035460405163c4158a5160e01b81526001600160a01b039182166004820152600092919091169063c4158a51906024016101606040518083038186803b15801561093057600080fd5b505afa158015610944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109689190610b6a565b8051600580546001600160a01b03199081166001600160a01b03938416179091556040830151600980548316918416919091179055608083015160088054831691841691909117905560a083015160048054831691841691909117905560e0830151600680548316918416919091179055610100830151600780548316918416919091179055610120830151600a8054831691841691909117905561014090920151600b8054909316911617905550565b6001600160a01b038116811461089057600080fd5b60008060008060808587031215610a4457600080fd5b8435610a4f81610a19565b93506020850135610a5f81610a19565b92506040850135610a6f81610a19565b91506060850135610a7f81610a19565b939692955090935050565b600060208284031215610a9c57600080fd5b8135610aa781610a19565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8051610aee81610a19565b919050565b600060208284031215610b0557600080fd5b8151610aa781610a19565b600060208284031215610b2257600080fd5b81518015158114610aa757600080fd5b604051610160810167ffffffffffffffff81118282101715610b6457634e487b7160e01b600052604160045260246000fd5b60405290565b60006101608284031215610b7d57600080fd5b610b85610b32565b610b8e83610ae3565b8152610b9c60208401610ae3565b6020820152610bad60408401610ae3565b6040820152610bbe60608401610ae3565b6060820152610bcf60808401610ae3565b6080820152610be060a08401610ae3565b60a0820152610bf160c08401610ae3565b60c0820152610c0260e08401610ae3565b60e0820152610100610c15818501610ae3565b90820152610120610c27848201610ae3565b90820152610140610c39848201610ae3565b90820152939250505056fea2646970667358221220e6adb439c62be0758505d0fb64076420ee113ac66a7d8fddb9cb4b84e9db7f1464736f6c63430008090033";

type LyraAdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LyraAdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LyraAdapter__factory extends ContractFactory {
  constructor(...args: LyraAdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LyraAdapter> {
    return super.deploy(overrides || {}) as Promise<LyraAdapter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LyraAdapter {
    return super.attach(address) as LyraAdapter;
  }
  connect(signer: Signer): LyraAdapter__factory {
    return super.connect(signer) as LyraAdapter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LyraAdapterInterface {
    return new utils.Interface(_abi) as LyraAdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LyraAdapter {
    return new Contract(address, _abi, signerOrProvider) as LyraAdapter;
  }
}
