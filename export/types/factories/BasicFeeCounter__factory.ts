/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  BasicFeeCounter,
  BasicFeeCounterInterface,
} from "../BasicFeeCounter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "nominatedOwner",
        type: "address",
      },
    ],
    name: "OnlyNominatedOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OnlyOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerNominated",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "nominateNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nominatedOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "counter",
        type: "address",
      },
      {
        internalType: "bool",
        name: "isTrusted",
        type: "bool",
      },
    ],
    name: "setTrustedCounter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "totalFeesPerMarket",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "market",
        type: "address",
      },
      {
        internalType: "address",
        name: "trader",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalFee",
        type: "uint256",
      },
    ],
    name: "trackFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "trustedCounter",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163390811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a16105018061006e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b14610113578063a3dd457914610126578063a4ed578114610159578063e6a1292b1461016c57600080fd5b80631627540c1461008d57806353a47bb7146100a257806379ba5097146100d25780637e673ead146100da575b600080fd5b6100a061009b3660046103c7565b61017f565b005b6001546100b5906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a06101db565b6101056100e83660046103e9565b600360209081526000928352604080842090915290825290205481565b6040519081526020016100c9565b6000546100b5906001600160a01b031681565b6101496101343660046103c7565b60026020526000908152604090205460ff1681565b60405190151581526020016100c9565b6100a061016736600461041c565b610298565b6100a061017a366004610469565b610330565b610187610363565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229060200160405180910390a150565b6001546001600160a01b03163314610226576001546040516312d9f3db60e31b81523060048201523360248201526001600160a01b0390911660448201526064015b60405180910390fd5b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b3360009081526002602052604090205460ff166102ed5760405162461bcd60e51b81526020600482015260136024820152723737ba103a393ab9ba32b21031b7bab73a32b960691b604482015260640161021d565b6001600160a01b038086166000908152600360209081526040808320938816835292905290812080548392906103249084906104a5565b90915550505050505050565b610338610363565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b6000546001600160a01b031633146103a95760005460405163035785f360e31b81523060048201523360248201526001600160a01b03909116604482015260640161021d565b565b80356001600160a01b03811681146103c257600080fd5b919050565b6000602082840312156103d957600080fd5b6103e2826103ab565b9392505050565b600080604083850312156103fc57600080fd5b610405836103ab565b9150610413602084016103ab565b90509250929050565b600080600080600060a0868803121561043457600080fd5b61043d866103ab565b945061044b602087016103ab565b94979496505050506040830135926060810135926080909101359150565b6000806040838503121561047c57600080fd5b610485836103ab565b91506020830135801515811461049a57600080fd5b809150509250929050565b600082198211156104c657634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220ecbcc3172d63b5aa898e4c769371d14e7ec6ff3abe4c2d37b46c3ec9855acaa064736f6c63430008090033";

type BasicFeeCounterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BasicFeeCounterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BasicFeeCounter__factory extends ContractFactory {
  constructor(...args: BasicFeeCounterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BasicFeeCounter> {
    return super.deploy(overrides || {}) as Promise<BasicFeeCounter>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BasicFeeCounter {
    return super.attach(address) as BasicFeeCounter;
  }
  connect(signer: Signer): BasicFeeCounter__factory {
    return super.connect(signer) as BasicFeeCounter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BasicFeeCounterInterface {
    return new utils.Interface(_abi) as BasicFeeCounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BasicFeeCounter {
    return new Contract(address, _abi, signerOrProvider) as BasicFeeCounter;
  }
}
