/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MathTest, MathTestInterface } from "../MathTest";

const _abi = [
  {
    inputs: [],
    name: "ExpOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "LnNegativeUndefined",
    type: "error",
  },
  {
    inputs: [],
    name: "Overflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "expV1",
    outputs: [
      {
        internalType: "uint256",
        name: "r",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "expV2",
    outputs: [
      {
        internalType: "uint256",
        name: "r",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "x",
        type: "int256",
      },
    ],
    name: "lnV1",
    outputs: [
      {
        internalType: "int256",
        name: "r",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "lnV2",
    outputs: [
      {
        internalType: "int256",
        name: "r",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610bbd806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634e31e3cb1461005157806367536ecc14610076578063b65c36c314610089578063da79ba861461009c575b600080fd5b61006461005f366004610840565b6100af565b60405190815260200160405180910390f35b610064610084366004610840565b6100c0565b610064610097366004610840565b6100cb565b6100646100aa366004610840565b6100d6565b60006100ba826100e1565b92915050565b60006100ba82610267565b60006100ba826102c0565b60006100ba82610505565b6000680248ce36a70cb26b3e1982136100fc57506000919050565b680755bf798b4a1bf1e582126101255760405163a37bfec960e01b815260040160405180910390fd5b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b6d2c06887d92262d378b9593af35346c09791803c2923d5d9721c3da80929091056001605f1b0190921d6bb17217f7d1cf79abc9e3b39881029095039081018102606090811d6d019dd9374d4315c8464a395fc09881016c1bff318b126baa436ea9aeaffd19840102821d93840193016d29c9ad45cc0beb0a2ff097a7bab40192909202821d6dcf3c27b2e487711b467e90f19320016c22fcd1cffa6fa000f6e27eeca082018202831d6d022f98fbc368092c79210d196fa0018202831d6d13aaae3ba38de06adc25ebfacc0901820290921d6d624dcbeb5e25df590e409325888a01026d360d7aeea093263ec6495851bd9760621b010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b60008160001361027a576100ba82610581565b61028e670de0b6b3a7640000602819610885565b82121561029d57506000919050565b6100ba6102b16102ac8461090a565b610581565b670de0b6b3a7640000906106e9565b600060018212156103065760008212156102ed5760405163906dbb0160e01b815260040160405180910390fd5b604051631a93c68960e11b815260040160405180910390fd5b6000606060016fffffffffffffffffffffffffffffffff851160071b85811c67ffffffffffffffff1060061b1785811c63ffffffff1060051b1785811c61ffff1060041b1785811c60ff10600390811b90911786811c600f1060021b1786811c909110821b1785811c919091111703609f8181039490941b90931c6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b393909302929092017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b60008080805b600881101561057857600061051f84610267565b905061054961052e8288610927565b6105388389610968565b610543906002610885565b90610708565b6105539085610927565b9250838314156105635750610578565b8293505080610571906109a7565b905061050b565b50909392505050565b6000816105975750670de0b6b3a7640000919050565b6105aa670de0b6b3a764000060646109c2565b82111561060e5760405162461bcd60e51b815260206004820152602860248201527f63616e6e6f742068616e646c65206578706f6e656e747320677265617465722060448201526707468616e203130360c41b606482015260840160405180910390fd5b6000670de0b6b3a764000061063361062e8567099e8db03256ce5d6106e9565b610720565b61063d91906109e1565b9050600061064c826002610ad9565b9050600061066267099e8db03256ce5d846109c2565b61066c9086610ae5565b9050670de0b6b3a7640000600060105b60ff8116156106d357670de0b6b3a76400006106a561069e60ff8416876109e1565b859061073e565b6106af9190610afc565b9250818314156106be576106d3565b829150806106cb81610b14565b91505061067c565b506106de82856109c2565b979650505050505050565b600061070183836106fc6012600a610ad9565b610756565b9392505050565b6000610701838361071b6012600a610ad9565b6107af565b6000610734670de0b6b3a764000083610b31565b6100ba9083610ae5565b600061070183836107516012600a610ad9565b6107dd565b6000808361076584600a6109c2565b61076f90876109c2565b61077991906109e1565b90506005610788600a83610b31565b1061079b57610798600a82610afc565b90505b6107a6600a826109e1565b95945050505050565b600080836107be84600a610885565b6107c89087610885565b6107d29190610b45565b90506107a6816107f5565b6000806107eb600a846109e1565b61076f85876109c2565b6000806005610805600a85610b73565b126108125750600a61082a565b600419610820600a85610b73565b1361082a57506009195b600a6108368285610927565b6107019190610b45565b60006020828403121561085257600080fd5b5035919050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160ff1b03818413828413808216868404861116156108ab576108ab61086f565b600160ff1b60008712828116878305891216156108ca576108ca61086f565b600087129250878205871284841616156108e6576108e661086f565b878505871281841616156108fc576108fc61086f565b505050929093029392505050565b6000600160ff1b8214156109205761092061086f565b5060000390565b600080821280156001600160ff1b03849003851316156109495761094961086f565b600160ff1b83900384128116156109625761096261086f565b50500190565b60008083128015600160ff1b8501841216156109865761098661086f565b6001600160ff1b03840183138116156109a1576109a161086f565b50500390565b60006000198214156109bb576109bb61086f565b5060010190565b60008160001904831182151516156109dc576109dc61086f565b500290565b6000826109f0576109f0610859565b500490565b600181815b80851115610a30578160001904821115610a1657610a1661086f565b80851615610a2357918102915b93841c93908002906109fa565b509250929050565b600082610a47575060016100ba565b81610a54575060006100ba565b8160018114610a6a5760028114610a7457610a90565b60019150506100ba565b60ff841115610a8557610a8561086f565b50506001821b6100ba565b5060208310610133831016604e8410600b8410161715610ab3575081810a6100ba565b610abd83836109f5565b8060001904821115610ad157610ad161086f565b029392505050565b60006107018383610a38565b600082821015610af757610af761086f565b500390565b60008219821115610b0f57610b0f61086f565b500190565b600060ff821680610b2757610b2761086f565b6000190192915050565b600082610b4057610b40610859565b500690565b600082610b5457610b54610859565b600160ff1b821460001984141615610b6e57610b6e61086f565b500590565b600082610b8257610b82610859565b50079056fea26469706673582212208d4500cc1932da89c9af658b46b21d3913a16cd6839e5ae3527ded1b9069e3a664736f6c63430008090033";

type MathTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MathTest__factory extends ContractFactory {
  constructor(...args: MathTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MathTest> {
    return super.deploy(overrides || {}) as Promise<MathTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MathTest {
    return super.attach(address) as MathTest;
  }
  connect(signer: Signer): MathTest__factory {
    return super.connect(signer) as MathTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathTestInterface {
    return new utils.Interface(_abi) as MathTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MathTest {
    return new Contract(address, _abi, signerOrProvider) as MathTest;
  }
}
