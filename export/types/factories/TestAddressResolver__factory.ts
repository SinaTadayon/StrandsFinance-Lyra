/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestAddressResolver,
  TestAddressResolverInterface,
} from "../TestAddressResolver";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "nominatedOwner",
        type: "address",
      },
    ],
    name: "OnlyNominatedOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OnlyOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerNominated",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "getAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "nominateNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nominatedOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "names",
        type: "bytes32[]",
      },
      {
        internalType: "address[]",
        name: "locations",
        type: "address[]",
      },
    ],
    name: "setAddresses",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163390811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a16105948061006e6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631627540c1461006757806321f8a7211461007c5780634ab01f5b146100c157806353a47bb7146100d457806379ba5097146100e75780638da5cb5b146100ef575b600080fd5b61007a61007536600461034e565b610102565b005b6100a561008a366004610370565b6002602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61007a6100cf366004610466565b61015e565b6001546100a5906001600160a01b031681565b61007a610232565b6000546100a5906001600160a01b031681565b61010a6102ea565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229060200160405180910390a150565b80518251146101a65760405162461bcd60e51b815260206004820152600f60248201526e0d8cadccee8d040dad2e6dac2e8c6d608b1b60448201526064015b60405180910390fd5b60005b825181101561022d578181815181106101c4576101c461051f565b6020026020010151600260008584815181106101e2576101e261051f565b6020026020010151815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508061022690610535565b90506101a9565b505050565b6001546001600160a01b03163314610278576001546040516312d9f3db60e31b81523060048201523360248201526001600160a01b03909116604482015260640161019d565b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6000546001600160a01b031633146103305760005460405163035785f360e31b81523060048201523360248201526001600160a01b03909116604482015260640161019d565b565b80356001600160a01b038116811461034957600080fd5b919050565b60006020828403121561036057600080fd5b61036982610332565b9392505050565b60006020828403121561038257600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156103c8576103c8610389565b604052919050565b600067ffffffffffffffff8211156103ea576103ea610389565b5060051b60200190565b600082601f83011261040557600080fd5b8135602061041a610415836103d0565b61039f565b82815260059290921b8401810191818101908684111561043957600080fd5b8286015b8481101561045b5761044e81610332565b835291830191830161043d565b509695505050505050565b6000806040838503121561047957600080fd5b823567ffffffffffffffff8082111561049157600080fd5b818501915085601f8301126104a557600080fd5b813560206104b5610415836103d0565b82815260059290921b840181019181810190898411156104d457600080fd5b948201945b838610156104f2578535825294820194908201906104d9565b9650508601359250508082111561050857600080fd5b50610515858286016103f4565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b600060001982141561055757634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220e4c7bd8e4c18b87e8a06666374b0e489ee042f9bf591d19868244ece056834cf64736f6c63430008090033";

type TestAddressResolverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestAddressResolverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestAddressResolver__factory extends ContractFactory {
  constructor(...args: TestAddressResolverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestAddressResolver> {
    return super.deploy(overrides || {}) as Promise<TestAddressResolver>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestAddressResolver {
    return super.attach(address) as TestAddressResolver;
  }
  connect(signer: Signer): TestAddressResolver__factory {
    return super.connect(signer) as TestAddressResolver__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAddressResolverInterface {
    return new utils.Interface(_abi) as TestAddressResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAddressResolver {
    return new Contract(address, _abi, signerOrProvider) as TestAddressResolver;
  }
}
