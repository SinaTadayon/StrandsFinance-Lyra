/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestExchangeRates,
  TestExchangeRatesInterface,
} from "../TestExchangeRates";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "nominatedOwner",
        type: "address",
      },
    ],
    name: "OnlyNominatedOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "thrower",
        type: "address",
      },
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OnlyOwner",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerNominated",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "isInvalid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "nominateNewOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "nominatedOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "currencyKey",
        type: "bytes32",
      },
    ],
    name: "rateAndInvalid",
    outputs: [
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "invalid",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "rates",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "currencyKey",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "rate",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "invalid",
        type: "bool",
      },
    ],
    name: "setRateAndInvalid",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b0319163390811782556040805192835260208301919091527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a16103fb8061006e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806379ba50971161005b57806379ba50971461012d5780638da5cb5b14610135578063dc72620514610148578063f95b59ba1461017657600080fd5b80630c71cd231461008d5780631627540c146100da5780631714e13c146100ef57806353a47bb714610102575b600080fd5b6100c061009b36600461033e565b600090815260026020908152604080832054600390925290912054909160ff90911690565b604080519283529015156020830152015b60405180910390f35b6100ed6100e8366004610357565b6101a9565b005b6100ed6100fd366004610387565b610205565b600154610115906001600160a01b031681565b6040516001600160a01b0390911681526020016100d1565b6100ed610239565b600054610115906001600160a01b031681565b61016861015636600461033e565b60026020526000908152604090205481565b6040519081526020016100d1565b61019961018436600461033e565b60036020526000908152604090205460ff1681565b60405190151581526020016100d1565b6101b16102f6565b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229060200160405180910390a150565b61020d6102f6565b600092835260026020908152604080852093909355600390529120805460ff1916911515919091179055565b6001546001600160a01b03163314610284576001546040516312d9f3db60e31b81523060048201523360248201526001600160a01b0390911660448201526064015b60405180910390fd5b600054600154604080516001600160a01b0393841681529290911660208301527fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c910160405180910390a160018054600080546001600160a01b03199081166001600160a01b03841617909155169055565b6000546001600160a01b0316331461033c5760005460405163035785f360e31b81523060048201523360248201526001600160a01b03909116604482015260640161027b565b565b60006020828403121561035057600080fd5b5035919050565b60006020828403121561036957600080fd5b81356001600160a01b038116811461038057600080fd5b9392505050565b60008060006060848603121561039c57600080fd5b8335925060208401359150604084013580151581146103ba57600080fd5b80915050925092509256fea2646970667358221220912c04b0dc19338a0c5c5dfae1f8457d34f7638eaa583656b595bfba631688a964736f6c63430008090033";

type TestExchangeRatesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestExchangeRatesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestExchangeRates__factory extends ContractFactory {
  constructor(...args: TestExchangeRatesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestExchangeRates> {
    return super.deploy(overrides || {}) as Promise<TestExchangeRates>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestExchangeRates {
    return super.attach(address) as TestExchangeRates;
  }
  connect(signer: Signer): TestExchangeRates__factory {
    return super.connect(signer) as TestExchangeRates__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestExchangeRatesInterface {
    return new utils.Interface(_abi) as TestExchangeRatesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestExchangeRates {
    return new Contract(address, _abi, signerOrProvider) as TestExchangeRates;
  }
}
