/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MockAggregatorV2V3Interface extends utils.Interface {
  functions: {
    "allRoundDataShouldRevert()": FunctionFragment;
    "decimals()": FunctionFragment;
    "entries(uint256)": FunctionFragment;
    "getAnswer(uint256)": FunctionFragment;
    "getRoundData(uint80)": FunctionFragment;
    "getTimestamp(uint256)": FunctionFragment;
    "keyDecimals()": FunctionFragment;
    "latestRound()": FunctionFragment;
    "latestRoundData()": FunctionFragment;
    "latestRoundDataShouldRevert()": FunctionFragment;
    "roundId()": FunctionFragment;
    "setAllRoundDataShouldRevert(bool)": FunctionFragment;
    "setDecimals(uint8)": FunctionFragment;
    "setLatestAnswer(int256,uint256)": FunctionFragment;
    "setLatestAnswerWithRound(int256,uint256,uint80)": FunctionFragment;
    "setLatestRoundDataShouldRevert(bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allRoundDataShouldRevert",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "entries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAnswer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoundData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keyDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoundDataShouldRevert",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "roundId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAllRoundDataShouldRevert",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecimals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestAnswer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestAnswerWithRound",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLatestRoundDataShouldRevert",
    values: [boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "allRoundDataShouldRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "entries", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keyDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRoundDataShouldRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roundId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllRoundDataShouldRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestAnswerWithRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLatestRoundDataShouldRevert",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MockAggregatorV2V3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockAggregatorV2V3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allRoundDataShouldRevert(overrides?: CallOverrides): Promise<[boolean]>;

    "allRoundDataShouldRevert()"(overrides?: CallOverrides): Promise<[boolean]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    entries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    "entries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getAnswer(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getAnswer(uint256)"(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoundData(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    "getRoundData(uint80)"(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getTimestamp(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getTimestamp(uint256)"(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    keyDecimals(overrides?: CallOverrides): Promise<[number]>;

    "keyDecimals()"(overrides?: CallOverrides): Promise<[number]>;

    latestRound(overrides?: CallOverrides): Promise<[BigNumber]>;

    "latestRound()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    "latestRoundData()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    latestRoundDataShouldRevert(overrides?: CallOverrides): Promise<[boolean]>;

    "latestRoundDataShouldRevert()"(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    roundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "roundId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAllRoundDataShouldRevert(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setAllRoundDataShouldRevert(bool)"(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDecimals(
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setDecimals(uint8)"(
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLatestAnswer(
      answer: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLatestAnswer(int256,uint256)"(
      answer: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLatestAnswerWithRound(
      answer: BigNumberish,
      timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLatestAnswerWithRound(int256,uint256,uint80)"(
      answer: BigNumberish,
      timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLatestRoundDataShouldRevert(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLatestRoundDataShouldRevert(bool)"(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allRoundDataShouldRevert(overrides?: CallOverrides): Promise<boolean>;

  "allRoundDataShouldRevert()"(overrides?: CallOverrides): Promise<boolean>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  entries(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  "entries(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      roundId: BigNumber;
      answer: BigNumber;
      startedAt: BigNumber;
      updatedAt: BigNumber;
      answeredInRound: BigNumber;
    }
  >;

  getAnswer(
    _roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getAnswer(uint256)"(
    _roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoundData(
    _roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  "getRoundData(uint80)"(
    _roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  getTimestamp(
    _roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getTimestamp(uint256)"(
    _roundId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  keyDecimals(overrides?: CallOverrides): Promise<number>;

  "keyDecimals()"(overrides?: CallOverrides): Promise<number>;

  latestRound(overrides?: CallOverrides): Promise<BigNumber>;

  "latestRound()"(overrides?: CallOverrides): Promise<BigNumber>;

  latestRoundData(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  "latestRoundData()"(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

  latestRoundDataShouldRevert(overrides?: CallOverrides): Promise<boolean>;

  "latestRoundDataShouldRevert()"(overrides?: CallOverrides): Promise<boolean>;

  roundId(overrides?: CallOverrides): Promise<BigNumber>;

  "roundId()"(overrides?: CallOverrides): Promise<BigNumber>;

  setAllRoundDataShouldRevert(
    _shouldRevert: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setAllRoundDataShouldRevert(bool)"(
    _shouldRevert: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDecimals(
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setDecimals(uint8)"(
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLatestAnswer(
    answer: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLatestAnswer(int256,uint256)"(
    answer: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLatestAnswerWithRound(
    answer: BigNumberish,
    timestamp: BigNumberish,
    _roundId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLatestAnswerWithRound(int256,uint256,uint80)"(
    answer: BigNumberish,
    timestamp: BigNumberish,
    _roundId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLatestRoundDataShouldRevert(
    _shouldRevert: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLatestRoundDataShouldRevert(bool)"(
    _shouldRevert: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allRoundDataShouldRevert(overrides?: CallOverrides): Promise<boolean>;

    "allRoundDataShouldRevert()"(overrides?: CallOverrides): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    entries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    "entries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        roundId: BigNumber;
        answer: BigNumber;
        startedAt: BigNumber;
        updatedAt: BigNumber;
        answeredInRound: BigNumber;
      }
    >;

    getAnswer(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAnswer(uint256)"(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoundData(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    "getRoundData(uint80)"(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    getTimestamp(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimestamp(uint256)"(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyDecimals(overrides?: CallOverrides): Promise<number>;

    "keyDecimals()"(overrides?: CallOverrides): Promise<number>;

    latestRound(overrides?: CallOverrides): Promise<BigNumber>;

    "latestRound()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    "latestRoundData()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]>;

    latestRoundDataShouldRevert(overrides?: CallOverrides): Promise<boolean>;

    "latestRoundDataShouldRevert()"(
      overrides?: CallOverrides
    ): Promise<boolean>;

    roundId(overrides?: CallOverrides): Promise<BigNumber>;

    "roundId()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAllRoundDataShouldRevert(
      _shouldRevert: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAllRoundDataShouldRevert(bool)"(
      _shouldRevert: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDecimals(
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDecimals(uint8)"(
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLatestAnswer(
      answer: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLatestAnswer(int256,uint256)"(
      answer: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLatestAnswerWithRound(
      answer: BigNumberish,
      timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLatestAnswerWithRound(int256,uint256,uint80)"(
      answer: BigNumberish,
      timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLatestRoundDataShouldRevert(
      _shouldRevert: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLatestRoundDataShouldRevert(bool)"(
      _shouldRevert: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    allRoundDataShouldRevert(overrides?: CallOverrides): Promise<BigNumber>;

    "allRoundDataShouldRevert()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    entries(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "entries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAnswer(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getAnswer(uint256)"(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoundData(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoundData(uint80)"(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimestamp(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTimestamp(uint256)"(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keyDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    "keyDecimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestRound(overrides?: CallOverrides): Promise<BigNumber>;

    "latestRound()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundData(overrides?: CallOverrides): Promise<BigNumber>;

    "latestRoundData()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestRoundDataShouldRevert(overrides?: CallOverrides): Promise<BigNumber>;

    "latestRoundDataShouldRevert()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roundId(overrides?: CallOverrides): Promise<BigNumber>;

    "roundId()"(overrides?: CallOverrides): Promise<BigNumber>;

    setAllRoundDataShouldRevert(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setAllRoundDataShouldRevert(bool)"(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDecimals(
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setDecimals(uint8)"(
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLatestAnswer(
      answer: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLatestAnswer(int256,uint256)"(
      answer: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLatestAnswerWithRound(
      answer: BigNumberish,
      timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLatestAnswerWithRound(int256,uint256,uint80)"(
      answer: BigNumberish,
      timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLatestRoundDataShouldRevert(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLatestRoundDataShouldRevert(bool)"(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allRoundDataShouldRevert(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allRoundDataShouldRevert()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    entries(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "entries(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAnswer(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAnswer(uint256)"(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoundData(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoundData(uint80)"(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimestamp(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTimestamp(uint256)"(
      _roundId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keyDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "keyDecimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRound(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "latestRound()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestRoundData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "latestRoundData()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestRoundDataShouldRevert(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestRoundDataShouldRevert()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roundId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "roundId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAllRoundDataShouldRevert(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setAllRoundDataShouldRevert(bool)"(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDecimals(
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setDecimals(uint8)"(
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLatestAnswer(
      answer: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLatestAnswer(int256,uint256)"(
      answer: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLatestAnswerWithRound(
      answer: BigNumberish,
      timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLatestAnswerWithRound(int256,uint256,uint80)"(
      answer: BigNumberish,
      timestamp: BigNumberish,
      _roundId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLatestRoundDataShouldRevert(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLatestRoundDataShouldRevert(bool)"(
      _shouldRevert: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
